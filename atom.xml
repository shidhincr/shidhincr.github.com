<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Web Cod . in]]></title>
  <link href="http://webcod.in/atom.xml" rel="self"/>
  <link href="http://webcod.in/"/>
  <updated>2014-02-04T02:19:56+05:30</updated>
  <id>http://webcod.in/</id>
  <author>
    <name><![CDATA[Shidhin C R]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multiple Left-hand assignment in JavaScript, is really bad. Think before you do it.]]></title>
    <link href="http://webcod.in/2014/02/03/multiple-left-hand-assignment-in-javascript-is-really-bad-think-once-before-you-do-it/"/>
    <updated>2014-02-03T12:04:00+05:30</updated>
    <id>http://webcod.in/2014/02/03/multiple-left-hand-assignment-in-javascript-is-really-bad-think-once-before-you-do-it</id>
    <content type="html"><![CDATA[<p><strong>“JavaScript allows multiple left-hand assignments”</strong></p>

<p>You may ask, what does that mean ? Well, if you’re not familiar, in JavaScript you can write the variable assignment expressions like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">d</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The assignment expressions are always evaluated from right-to-left. So what the above expression actually does is, assign the value <code>10</code> to the variable <code>d</code>, then assign the value of <code>d</code> to <code>c</code> and so on. <!--more-->Finally all the variables will get the value <code>10</code>. This kind of &ldquo;short-hand&rdquo; code will allows you to get rid of the repetitive code; especially when you want to initialise multiple variables with an initial value.</p>

<h3>And what’s the catch here ?</h3>

<p>Well, in simple words: <strong>“the scope“</strong>  . To understand that, let’s move the same expression inside a function. Like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span> <span class="p">(){</span>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">d</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you expect all of these variables are having a scope local to the function <code>foo</code>, then you’re wrong. What happens here is, the var statement is only applicable to the variable <code>a</code>. And all the other variables are considered with out the <code>var</code> statement, hence will be the global. Try executing foo method, you would see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">foo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">a</span> <span class="c1">// undefined</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">b</span> <span class="c1">// will be 10</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">c</span> <span class="c1">// will be 10</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">d</span> <span class="c1">// will be 10 </span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, that’s the catch ! So avoid multiple left-hand assignments inside any functions. If you’re writing this in global level ( you’re assuming all of your variables to go in global scope ), then this is not at all an issue. So better watch out next time before you do this.</p>

<h3>Final note</h3>

<p>If  you&rsquo;re not convinced and still want to do left-hand assignments, then the right way of doing it is like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">d</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Declaring all the variables in the first line is <strong>one of the good coding style</strong>. This will make sure that you’re not the victim of scope issues and hoisting problems.  So always read about the JavaScript best practices, and adhere to good coding style.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting VerbalRegex.com open source project]]></title>
    <link href="http://webcod.in/2014/01/29/starting-verbalregex-dot-com-open-source-project/"/>
    <updated>2014-01-29T01:09:00+05:30</updated>
    <id>http://webcod.in/2014/01/29/starting-verbalregex-dot-com-open-source-project</id>
    <content type="html"><![CDATA[<p>On the other day, while exploring the Github repositories, this one grabbed my attention.</p>

<p><a href="https://github.com/VerbalExpressions/JSVerbalExpressions">https://github.com/VerbalExpressions/JSVerbalExpressions</a></p>

<p>I like this idea so much. In fact, I also were trying to build something similar. Writing regular expressions were always a tedious task for me. I&rsquo;ve tried learning it enormous times, but still when I want to construct one, I&rsquo;ve to google around.</p>

<!-- more -->


<p>So that&rsquo;s why this project got my interest. The idea is pretty cool; Instead of remembering all those complex patterns of regular expressions, I can just use the simple API provided by the library. That&rsquo;s really cool!</p>

<p>But again, There&rsquo;s a limitation: It&rsquo;s just a JavaScript library that can be used inside the code only. What I really wanted is an user interface where I can use some simple steps –– mostly like the API methods of the above library –– to build my final regular expression.</p>

<p>That&rsquo;s when I started working on a new website called <a href="VerbalRegex.com">http://wwww.verbalregex.com</a>. The website is not live yet. I&rsquo;ve created the repository in Github and started working on the UI of it.</p>

<ul>
<li><p>The tools used so far are:</p>

<pre><code>- Yeo man for scaffolding
- AngularJS 
- Angular UI and Twitter Bootstrap
- Grunt
- Karma ( unit testing )
</code></pre></li>
</ul>


<p>The project is in the very early stage. I&rsquo;ve invited some of my friends for the contribution. Once all the designs and requirements ready, the project will find it&rsquo;s momentum.</p>

<p>Here is a screenshot of what I&rsquo;ve built so far.</p>

<p><img src="https://lh5.googleusercontent.com/-oNcO5nhOIwQ/UugGMrn13mI/AAAAAAAAG_c/DSUWGrNxGAw/w958-h495-no/Screen+Shot+2014-01-29+at+1.03.33+am.png" alt="verbalregex.com" /></p>

<p>I&rsquo;m trying to work more on this project on my spare times. Hope everything will go well !!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Blog Tweaks: Adding Author Info Section Below Each Posts]]></title>
    <link href="http://webcod.in/2013/10/15/octopress-blog-tweaks-adding-author-information-section-below-each-posts/"/>
    <updated>2013-10-15T10:15:00+05:30</updated>
    <id>http://webcod.in/2013/10/15/octopress-blog-tweaks-adding-author-information-section-below-each-posts</id>
    <content type="html"><![CDATA[<p>A good blogging platform is one which allows easy customization. I&rsquo;ve been using Octopress for more than 2 weeks and happy to tell that it&rsquo;s one of those allows customization with out any pain. I want to share a tweak I added to my blog recently : It&rsquo;s an author information section below every post. Let&rsquo;s see how I built it and added to my blog.</p>

<!--more-->


<h2>What we&rsquo;re going to achieve</h2>

<p><img src="http://webcod.in//lh3.googleusercontent.com/-hT72wlBvU-Y/UlzR3V8twdI/AAAAAAAACP0/2aoFaMfzjA0/s916/Screen%2520Shot%25202013-10-15%2520at%252010.57.29%2520AM.png"></p>

<p>See the above screenshot ? It&rsquo;s a simple section containing the author image, description and a twitter follow button. I&rsquo;ll explain how to build this and add to every post.</p>

<h2>Let&rsquo;s Begin</h2>

<p>Octopress is basically based on Jekyll and liquid templating. Everything in the main view is broken-down to subviews called partials. These partials are nothing but re-usable html files which will be included in other views. So for creating our author information section, we also need to create a partial and include it in the post view.</p>

<p>Before start creating our author information view, let&rsquo;s analyse the files and folders we&rsquo;re interested in.</p>

<p>Open the octopress blog folder and get familiar with these:</p>

<ol>
<li> source/_layouts/post.html</li>
<li> source/_includes/custom/</li>
<li> sass/custom/_styles.scss</li>
<li> source/images/</li>
</ol>


<p><strong>source/_layouts/post.html</strong></p>

<p>This is the partial responsible for rendering the blog post entry. We need to make modifications in this view to show any changes in the post.</p>

<p><strong>source/_includes/custom/</strong></p>

<p>This folder contains custom partials –– usually from the 3rd party plugins and all. We&rsquo;re going to add our view html file here only.</p>

<p><strong>sass/custom/_styles.scss</strong></p>

<p>Octopress uses SCSS ( a CSS preprocessor ) for all of it&rsquo;s styling and theming. This particular file will be processed at the end, hence any custom styles required for the blog are added in this file only.</p>

<p><strong>source/images/</strong></p>

<p>All the image assets goes to this folder.</p>

<p>Time to create the view for the author information section. I&rsquo;ve created a new file called <strong>&ldquo;aboutauthor.html&rdquo;</strong> (code is given below ) and placed in the <strong><code>source/_includes/custom/</code></strong> folder. It&rsquo;s just the sample and you can create your own template.</p>

<figure class='code'><figcaption><span>aboutauthor.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;about&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;about-image&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/images/author.jpg&quot;</span> <span class="na">alt=</span><span class="s">&quot;author name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/span&gt;</span>
</span><span class='line'>     <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;about-desc&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;span&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</span><span class='line'>          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
</span><span class='line'>          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
</span><span class='line'>          consequat.<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>          <span class="nt">&lt;br/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;hr/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;https://twitter.com/yourtwittername&quot;</span> <span class="na">class=</span><span class="s">&quot;twitter-follow-button&quot;</span> <span class="na">data-show-count=</span><span class="s">&quot;false&quot;</span> <span class="na">data-size=</span><span class="s">&quot;large&quot;</span><span class="nt">&gt;</span>Follow @yourtwittername<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code is self explanatory. One more extra effort is to add the author image –– which should go to the <strong><code>source/images/</code></strong> folder. I&rsquo;ve used a jpeg image of dimension <code>175x120</code>.</p>

<p>To apply some CSS for our view, open the <strong>&ldquo;_styles.scss&rdquo;</strong> and add the following rules.</p>

<figure class='code'><figcaption><span>_styles.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.about</span> <span class="p">{</span>
</span><span class='line'>     <span class="na">font-style</span><span class="o">:</span> <span class="no">italic</span><span class="p">;</span>
</span><span class='line'>     <span class="na">background-color</span><span class="o">:</span> <span class="mh">#FFF</span><span class="p">;</span>
</span><span class='line'>     <span class="na">padding</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>     <span class="na">border-radius</span><span class="o">:</span> <span class="mi">5</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>     <span class="na">border</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="mh">#CCC</span><span class="p">;</span>
</span><span class='line'>     <span class="na">box-shadow</span><span class="o">:</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">5</span><span class="kt">px</span> <span class="mh">#CCC</span><span class="p">;</span>
</span><span class='line'>     <span class="na">overflow</span><span class="o">:</span> <span class="no">hidden</span><span class="p">;</span>
</span><span class='line'>     <span class="na">clear</span><span class="o">:</span> <span class="no">both</span><span class="p">;</span>
</span><span class='line'>     <span class="nc">.about-image</span> <span class="p">{</span>
</span><span class='line'>          <span class="na">width</span><span class="o">:</span> <span class="mi">150</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>          <span class="na">float</span><span class="o">:</span> <span class="no">left</span><span class="p">;</span>
</span><span class='line'>          <span class="na">display</span><span class="o">:</span> <span class="no">inline</span><span class="o">-</span><span class="no">block</span><span class="p">;</span>
</span><span class='line'>          <span class="na">margin-right</span><span class="o">:</span> <span class="mi">20</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="nc">.about-desc</span> <span class="o">&gt;</span> <span class="nt">hr</span> <span class="p">{</span>
</span><span class='line'>          <span class="na">border</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'>          <span class="na">border-top</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">dotted</span> <span class="mh">#CCC</span><span class="p">;</span>
</span><span class='line'>          <span class="na">padding-top</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="nn">#twitter-widget-1</span> <span class="p">{</span>
</span><span class='line'>          <span class="na">float</span><span class="o">:</span> <span class="no">right</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Update Post Template</h2>

<p>Now we&rsquo;ve the CSS and Markup ready for our author information view. We can add the <strong>&ldquo;aboutauthor.html&rdquo;</strong> view to any other view by using <code>include</code> keyword. Let&rsquo;s open the <strong><code>source/_layouts/post.html</code></strong> partial and include our newly created view below the post content.</p>

<p>Here is the diff file for <strong><em>updated post.html</em></strong> :</p>

<div><script src='https://gist.github.com/6989638.js'></script>
<noscript><pre><code> &lt;div&gt;
 &lt;article class=&quot;hentry&quot; role=&quot;article&quot;&gt;
   {% include article.html %}
   &lt;footer&gt;
     &lt;p class=&quot;meta&quot;&gt;
       {% include post/author.html %}
       {% include post/date.html %}{% if updated %}{{ updated }}{% else %}{{ time }}{% endif %}
       {% include post/categories.html %}
     &lt;/p&gt;
     {% unless page.sharing == false %}
       {% include post/sharing.html %}
     {% endunless %}
     &lt;p class=&quot;meta&quot;&gt;
+    {% include custom/aboutauthor.html %}
+    &lt;/p&gt;
+    &lt;p class=&quot;meta&quot;&gt;
       {% if page.previous.url %}
         &lt;a class=&quot;basic-alignment left&quot; href=&quot;{{page.previous.url}}&quot; title=&quot;Previous Post: {{page.previous.title}}&quot;&gt;&amp;laquo; {{page.previous.title}}&lt;/a&gt;
       {% endif %}
       {% if page.next.url %}
         &lt;a class=&quot;basic-alignment right&quot; href=&quot;{{page.next.url}}&quot; title=&quot;Next Post: {{page.next.title}}&quot;&gt;{{page.next.title}} &amp;raquo;&lt;/a&gt;
       {% endif %}
     &lt;/p&gt;
   &lt;/footer&gt;
 &lt;/article&gt;
 {% if site.disqus_short_name and page.comments == true %}
   &lt;section&gt;
     &lt;h1&gt;Comments&lt;/h1&gt;
     &lt;div id=&quot;disqus_thread&quot; aria-live=&quot;polite&quot;&gt;{% include post/disqus_thread.html %}&lt;/div&gt;
   &lt;/section&gt;
 {% endif %}
 &lt;/div&gt;
 {% unless page.sidebar == false %}
 &lt;aside class=&quot;sidebar&quot;&gt;
   {% if site.post_asides.size %}
     {% include_array post_asides %}
   {% else %}
     {% include_array default_asides %}
   {% endif %}
 &lt;/aside&gt;
 {% endunless %}</code></pre></noscript></div>


<h2>Preview it</h2>

<p>Use below rake commands to preview the blog.</p>

<pre><code>rake generate; rake preview
</code></pre>

<p>That&rsquo;s it !! The author information section should be appearing below each blog post by now. Replace the &ldquo;Lorum ipsum&rdquo; with the words best describes you.</p>

<p>Thanks for reading, feedbacks are welcome. Enjoy blogging !!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ Some Gotchas In Arithmetic Expression Evaluation : JavaScript]]></title>
    <link href="http://webcod.in/2013/09/26/some-gotchas-in-arithmetic-expression-evaluation-javascript/"/>
    <updated>2013-09-26T16:15:00+05:30</updated>
    <id>http://webcod.in/2013/09/26/some-gotchas-in-arithmetic-expression-evaluation-javascript</id>
    <content type="html"><![CDATA[<h2>Solve a small problem in JavaScript</h2>

<p>This post is just for recollecting some of the basics of JavaScript. Let&rsquo;s start with a small JavaScript code. Here is the code –– Solve it with out using the console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="p">(</span> <span class="nx">a</span> <span class="o">-</span> <span class="p">(</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">(</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="p">)</span> <span class="o">-</span> <span class="nx">b</span> <span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take your own time to come up with an answer before moving to the next section.</p>

<!-- more -->


<h2>Analyzing the problem</h2>

<p>If your answer is <code>a = 3 and b = 5</code>, this post is written for you. Open your favorite browser and fire up the console. Put the above code in the console and see the values of <code>a</code> and <code>b</code> now.</p>

<p>Stunned ?  Yeah, The values of <code>a</code> and <code>b</code> are <code>a = 0  and b = 5</code> now. Honestly I also got it wrong initially. I did ask this question to some of my friends ( who are in JavaScript circle ),  and all of them gave me wrong answer.</p>

<h2>Some flashback</h2>

<p>So, here is how I arrived this to particular question. Last week I was trying to write the code for an interview problem in JavaScript  and it&rsquo;s a very common one –– How to swap values of 2 variables with out using a 3rd variable.</p>

<p>Let the variables be <code>a = 5</code> and <code>b = 3</code>. Swap the values of <code>a</code> and <code>b</code> with out using any 3rd variable .</p>

<p>Solution is simple . Just do the following arithmetic operations</p>

<pre><code>a = a + b
b = a - b
a = a - b
</code></pre>

<p>This will do the job.</p>

<p>What I was trying is to write the entire expression in one single line. I wrote it like below.</p>

<p><strong>Code 1 :</strong></p>

<figure class='code'><figcaption><span>CODE 1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="p">(</span> <span class="nx">a</span> <span class="o">-</span> <span class="p">(</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">(</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="p">)</span> <span class="o">-</span> <span class="nx">b</span> <span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool .. I thought it&rsquo;s done.</p>

<p>But I got surpriced when I tried it in the console. I was expecting final values should be <code>a = 3 and b = 5</code> but the output was different. I got <code>a = 0 and b =5</code>.</p>

<p>WTF ? Let me change the code a bit. I modified the code like this</p>

<p><strong>Code 2 :</strong></p>

<figure class='code'><figcaption><span>CODE 2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="p">(</span> <span class="p">(</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">(</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="p">)</span> <span class="o">-</span> <span class="nx">b</span> <span class="p">)</span> <span class="o">-</span> <span class="nx">a</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
This time I got the correct results <code>a = -3 and b = 5</code>. So why the hell it didn&rsquo;t work for the first expression ?</p>

<h2>The answer is :</h2>

<p>We&rsquo;re evaluating it wrongly. I mean we are not doing the way JavaScript engine does. I went to the EcmaScript specification and read the section for &ldquo;Arithmetic Expression&rdquo;.</p>

<blockquote><p>Expressions : Any valid unit code that resolves to some value.</p></blockquote>

<p><strong>Two things to note :</strong></p>

<ul>
<li>Assignment operators are right to left associative. That means for the expression <code>a = b = 5</code>, the value <code>5</code> will be assigned to variable <code>b</code> and then assigned to variable <code>b</code>.</li>
<li>Arithmetic and multiplicative operators are left to right associative. For the expression <code>c = a + b</code>, the value of <code>a</code> will be computed first, then goes to <code>b</code> and computes it&rsquo;s value.</li>
</ul>


<p>For our problem, if I draw the parse tree roughly, it will be like below.</p>

<pre><code>   =
 /   \
a     -
    /   \
   a     =
       /   \
      b     -
          /   \
         =      b
       /   \
      a     +
          /   \
         a     b
</code></pre>

<p>Ideally parse tree doesn&rsquo;t contain the <code>=</code> operator. I made it like this to understand how the parser start evaluating the expression.</p>

<p>In the above parse tree, all the <code>=</code> operators are evaluated from right-to left ( that means the right node will be evaluated first and the value will be assigned to the left node ). On the other hand, arithmetic/multiplicative expressions are evaluated from left to right ( that means the values will be assigned from left and the arithmetic/multiplicative operation will be carried out ).</p>

<p>We can identify sub-expressions in our code. Basically, we can extract the expressions containing <code>=</code> to sub-expressions. Hence the above parse tree can be re-drawn like below.</p>

<pre><code>   =
 /   \
a     -
    /   \
   a     X
</code></pre>

<p>Where <code>X</code> is the <strong>Sub-Expression 1</strong> given below :</p>

<pre><code>         =
       /   \
      b     -
          /   \
         Y     b
</code></pre>

<p>Where <code>Y</code> is the <strong>Sub-Expression 2</strong> given below :</p>

<pre><code>         =
       /   \
      a     +
          /   \
         a     b
</code></pre>

<p>Let&rsquo;s see how JavaScript parser evaluate the value of <code>a</code> finally.</p>

<h3>Steps :</h3>

<ul>
<li><p>Parser takes the main expression <code>a = a - X</code> and evaluated from left to right. At first, parser finds the variable<code>a</code> and finds it&rsquo;s value. Now the parser moves to the next variable <code>X</code> and try to calculate it&rsquo;s value. Since <code>X</code> is an expression, it need to be evaluated to form a primitive value.</p>

<p>  <em>Note: To get the value, parser internally calls the <a href="http://es5.github.io/#x8.7.1">GetValue</a> of each operands</em></p>

<p>  So, for the parser, the expression becomes  like this :</p></li>
</ul>


<figure class='code'><figcaption><span>Value Of &#8220;a&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">a</span> <span class="p">)</span> <span class="o">-</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">Evaluate</span><span class="p">(</span> <span class="nx">X</span> <span class="p">)</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is :</p>

<figure class='code'><figcaption><span>Value of &#8220;a&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">-</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">Evaluate</span><span class="p">(</span> <span class="nx">X</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li><p>Now it need to evaluate the expression <code>X</code> where <code>b = Y - b</code>. Here the first operand <code>Y</code> itself a sub-expression, so parser has to evaluate it first before calculating the value of the second operand <code>b</code>.</p></li>
<li><p>Let&rsquo;s evaluate the expression <code>Y</code> which is <code>a = a + b</code>. This is straightforward and contains no sub expression , hence evaluated like this.</p></li>
</ul>


<figure class='code'><figcaption><span>New value of &#8220;a&#8221; is</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">a</span> <span class="p">)</span> <span class="o">+</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">b</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This equals to :</p>

<figure class='code'><figcaption><span>&#8220;a&#8221; became 8   </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
Finally the value of expression <code>Y</code> becomes <code>8</code>.</p>

<ul>
<li>Coming back to step 2 where expression <code>X</code> needs to be completed. expression <code>X</code> is</li>
</ul>


<figure class='code'><figcaption><span>Computing the value of &#8220;b&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">b</span> <span class="o">=</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">Y</span> <span class="p">)</span> <span class="o">-</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">b</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Becomes like this :</p>

<figure class='code'><figcaption><span>Value of &#8220;b&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">b</span> <span class="o">=</span> <span class="mi">8</span> <span class="o">-</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">b</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is :</p>

<figure class='code'><figcaption><span>Final value of &#8220;b&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">b</span> <span class="o">=</span> <span class="mi">8</span> <span class="o">-</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally the value of <code>b</code> and expression <code>X</code> becomes <code>5</code>.</p>

<ul>
<li>So now all the sub expressions are evaluated , the main expression can be completed now.</li>
</ul>


<p>The main expression was :</p>

<figure class='code'><figcaption><span>Evaluating the main expression</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">-</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">X</span> <span class="p">)</span> <span class="p">;</span> <span class="c1">// value of X = 5 now</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>That means final value of <code>a = 5 - 5</code>  which is <code>0</code>.</p>

<ul>
<li>Finally the values of <code>a</code> and <code>b</code> will become <code>a = 0 and b = 5</code></li>
</ul>


<p>Now we&rsquo;re in the same direction with JS engine. We can apply what we learned for the <strong>Code 2</strong> also.</p>

<h2>Conclusion</h2>

<p>I didn&rsquo;t want to write this much long. All I wanted to recollect some of those basic stuff. Thanks for reading !!</p>

<p> References :</p>

<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators</a></li>
<li><a href="http://www.ecma-international.org/ecma-262/5.1/#sec-8.7">http://www.ecma-international.org/ecma-262/5.1/#sec-8.7</a></li>
<li><a href="http://es5.github.io/#x8.7.1">http://es5.github.io/#x8.7.1</a></li>
<li><a href="http://stackoverflow.com/questions/19045411/can-somebody-explain-how-javascript-arithmetic-expressions-work">http://stackoverflow.com/questions/19045411/can-somebody-explain-how-javascript-arithmetic-expressions-work</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting my new blog: Finally Octopress]]></title>
    <link href="http://webcod.in/2013/09/25/starting-my-new-blog-finally-octopress/"/>
    <updated>2013-09-25T07:36:00+05:30</updated>
    <id>http://webcod.in/2013/09/25/starting-my-new-blog-finally-octopress</id>
    <content type="html"><![CDATA[<h2>Finally Octopress !!</h2>

<p>I wanted to start writing blog ever since I started coding. I never had a success setting it up because of time constraints and many other reasons. During this time, I&rsquo;ve evaluated a number of blogging platforms and eventually I thought of using wordpress as my blogging platform when I start my blog.</p>

<p>Now finally I&rsquo;m having some time. I decided to spend some time everyday dedicating to my blog. So first thing I need to do is setting up a wordpress blog with default template.</p>

<p>I started browsing to find a good theme for the wordpress blog before setting up anything. While browsing, I opened <strong><a href="http://www.paulirish.com">paulirish.com</a></strong> and saw that he&rsquo;d recently switched his blog to some new blogging software called Octopress.</p>

<!-- more -->


<p>I also read about Octopress from my daily reading list, but didn&rsquo;t give much attention to it. But I found Paul&rsquo;s blog very neat –– The default theme of Octopress is awesome –– and it&rsquo;s responsive too. I started checking out all Octopress blogs, and how to configure it. Finally I decided to use Octopress for my blog.</p>

<h3>Why Octopress and not Wordpress ?</h3>

<p>Octopress is simple and comes up with a neat, elegant ( and responsive ) theme. Obviously Wordpress is really the most powerful and most widely used blogging software, and it has lot of extentions and plugins available. But for me , for writing some tech tips , don&rsquo;t need all those stuff. Using Octopress , I can use familiar git commands , write everything in markdown and finally can deploy to github pages.</p>

<p>Another thing I liked is, all my blog content will be residing in my system itself in the form of markdown files. I can generate my static blog site anytime I need and deploy to number of hosting services. The advantage of a static website over a dynamic platform like Wordpress is : It&rsquo;s loading time will be faster. Because everytime I access a blog post in Wordpress, it need to fetch from the database. But Octopress blog will have only static html pages –– so it will be loaded faster.</p>

<h3>How to set up an Octopress blog ?</h3>

<p>This had been covered in many articles. Just google around , you can find a lot. I followed these simple instructions given in the Octopress website. Link is given below</p>

<p><a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a></p>

<p>There&rsquo;re couple of good themes built for Octopress ( It&rsquo;s all 3rd party ). Since I like the default Octopress theme, I didn&rsquo;t try any 3rd party themes. But It&rsquo;s worth checking out those.</p>

<p>PS: I&rsquo;ll be writing mainly about Javascript , HTML ,CSS and client side framework and design patterns here. Expect more posts from me soon in this space.</p>
]]></content>
  </entry>
  
</feed>
