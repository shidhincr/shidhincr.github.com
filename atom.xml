<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[We.B.Log]]></title>
  <link href="http://www.undefinednull.com/atom.xml" rel="self"/>
  <link href="http://www.undefinednull.com/"/>
  <updated>2014-03-21T16:52:13+05:30</updated>
  <id>http://www.undefinednull.com/</id>
  <author>
    <name><![CDATA[Shidhin C R]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PacketPub's 2000th Title Offer]]></title>
    <link href="http://www.undefinednull.com/2014/03/21/packetpubs-2000th-title-offer/"/>
    <updated>2014-03-21T16:25:00+05:30</updated>
    <id>http://www.undefinednull.com/2014/03/21/packetpubs-2000th-title-offer</id>
    <content type="html"><![CDATA[<p><img src="http://lh4.googleusercontent.com/-Z3p9zQTOkDo/Uywf-U3Iu-I/AAAAAAAAHfQ/qvPe9fC2MoI/w600-h250-no/2000th-Book-Home-Page-Banner.png" alt="#Packt2k" /></p>

<h2>What is this all about ?</h2>

<p>Being a good customer of Packet Pub from long time, I did subscribe to their email service, so that I would be notified about the latest book releases, promotional offers..etc. And today, I received an email about their 2000th title offer. I guess this is an exciting offer worth sharing through my blog.</p>

<p>This was the content of the mail:</p>

<blockquote><p>We, at Packt Publishing are launching an exciting campaign to coincide with the release of our 2000th title. During this offer Packt is giving its reader a chance to dive into their comprehensive catalogue and avail a Buy One, Get One Free offer across their entire range of eBooks.
The campaign will continue up until 26th-Mar-2014. Following are the benefits readers can avail during this campaign.</p>

<ul>
<li>Unlimited purchases during the offer period</li>
<li>Offer is automatically applied at checkout</li>
</ul>
</blockquote>

<p>Go and grab this offer before it ends. Here is the direct <a href="bit.ly/1j26nPN">link ( #Packt2k )</a> to their offers page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS: Real time model persistence using local storage]]></title>
    <link href="http://www.undefinednull.com/2014/02/25/angularjs-real-time-model-persistence-using-local-storage/"/>
    <updated>2014-02-25T07:46:00+05:30</updated>
    <id>http://www.undefinednull.com/2014/02/25/angularjs-real-time-model-persistence-using-local-storage</id>
    <content type="html"><![CDATA[<p>Last week, I came across a situation while working on a simple AngularJS application. I&rsquo;d to sync the data between multiple open tabs. As you guess,  the easy way to sync data between multiple tabs is through <strong>local storage</strong>. Ofcourse there are better ways of doing this using <strong>websockets</strong>; but here I am going to explain the client-side way –– using local storage and real time updating other tabs.</p>

<!--more-->


<h2>The Code</h2>

<p>I created a demo app in Plunker. Code is given below</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&quot;app&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script  </span><span class="na">src=</span><span class="s">&quot;http://code.angularjs.org/1.2.13/angular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;style.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;script.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body</span> <span class="na">ng-controller=</span><span class="s">&quot;MaintCtrl as m&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span><span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h2&gt;</span>Current LocalStorage value is = <span class="nt">&lt;em&gt;</span><span class="nt">&lt;/em&gt;&lt;/h2&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;m.value&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;update&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;m.update(m.value)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the JavaScript :</p>

<figure class='code'><figcaption><span>script.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">app</span><span class="p">;</span>
</span><span class='line'><span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;app&quot;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;MaintCtrl&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">LS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="s2">&quot;This is a localstorage demo app&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">LS</span><span class="p">.</span><span class="nx">getData</span><span class="p">();</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">latestData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">LS</span><span class="p">.</span><span class="nx">getData</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">update</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">LS</span><span class="p">.</span><span class="nx">setData</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s2">&quot;LS&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$window</span><span class="p">,</span> <span class="nx">$rootScope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setData</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$window</span><span class="p">.</span><span class="nx">localStorage</span> <span class="o">&amp;&amp;</span> <span class="nx">$window</span><span class="p">.</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s1">&#39;my-storage&#39;</span><span class="p">,</span> <span class="nx">val</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">getData</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">$window</span><span class="p">.</span><span class="nx">localStorage</span> <span class="o">&amp;&amp;</span> <span class="nx">$window</span><span class="p">.</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">&#39;my-storage&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above shows a simple application that stores data in local storage. This works well when there&rsquo;s only one tab. Our challenge is to ensure the view is same when the application is opened in multiple tabs as well.</p>

<h2>The Technique</h2>

<p>Local storage provides an <code>event</code> called <code>storage</code> on window object. Whenever the localstorage gets updated, all the event listeners attached to <code>storage</code> gets invoked. The first parameter to the handler function is an event object which contains  an <code>event.key</code> pointing to the local storage value changed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nx">$window</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;storage&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">key</span> <span class="o">===</span> <span class="s1">&#39;my-storage&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>$rootScope.$apply()</strong>, will trigger a digest cycle from root scope, and all the views will be updated with the new model value.</p>

<p>Final JavaScript :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">app</span><span class="p">;</span>
</span><span class='line'><span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;app&quot;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;MaintCtrl&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">LS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="s2">&quot;This is a localstorage demo app&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">LS</span><span class="p">.</span><span class="nx">getData</span><span class="p">();</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">latestData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">LS</span><span class="p">.</span><span class="nx">getData</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">update</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">LS</span><span class="p">.</span><span class="nx">setData</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s2">&quot;LS&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$window</span><span class="p">,</span> <span class="nx">$rootScope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nx">$window</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;storage&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">key</span> <span class="o">===</span> <span class="s1">&#39;my-storage&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setData</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$window</span><span class="p">.</span><span class="nx">localStorage</span> <span class="o">&amp;&amp;</span> <span class="nx">$window</span><span class="p">.</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s1">&#39;my-storage&#39;</span><span class="p">,</span> <span class="nx">val</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">getData</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">$window</span><span class="p">.</span><span class="nx">localStorage</span> <span class="o">&amp;&amp;</span> <span class="nx">$window</span><span class="p">.</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">&#39;my-storage&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Demo</h2>

<p>Try opening the following link in multiple  tabs. Update the input text from different tabs, and you can see them updating the other tabs as well.</p>

<p><a href="http://embed.plnkr.co/ThpFwX7BRhRhNWPuq5ap/preview" target="_blank">Angular LocalStorage Demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['Resolve' in AngularJS routes, explained as story]]></title>
    <link href="http://www.undefinednull.com/2014/02/17/resolve-in-angularjs-routes-explained-as-story/"/>
    <updated>2014-02-17T11:09:00+05:30</updated>
    <id>http://www.undefinednull.com/2014/02/17/resolve-in-angularjs-routes-explained-as-story</id>
    <content type="html"><![CDATA[<p>I feel AngularJS documentation is baffling sometimes. Reason may be,  I&rsquo;m going through the same <a href="http://www.bennadel.com/blog/2439-My-Experience-With-AngularJS-The-Super-heroic-JavaScript-MVW-Framework.htm">learning curve</a> described by <a href="https://twitter.com/bennadel">@bennadel</a>. Through this article, I&rsquo;m primarily aiming to help those who got stuck at some point of the curve. Don&rsquo;t take it too seriously; I&rsquo;m just sharing some of my experiences with AngularJS.</p>

<!--more-->


<p>Recently, I was learning how routes work in AngularJS, and how they talk to the controller ..etc. Then I observed the controller initialisation can differ based on the route configurations and events like <code>$routeChangeSuccess</code> and <code>$routeChangeError</code> are fired accordingly. Most of these are achieved by a <code>resolve</code> attribute of  the route configuration object. Here, I&rsquo;ll explain it through 3 versions of a story.</p>

<h2>The Story</h2>

<p>On one day, I was planning for a trip to a Switzerland. So I called the tour coordinator who makes the arrangements to this place. He explained the itinerary and hotel details clearly, so I asked him to make the necessary arrangements. After that, it&rsquo;s the tour coordinator&rsquo;s responsibility to book the room and make other required set-ups for my trip. Finally, I did a trip to Switzerland.</p>

<p>Let&rsquo;s convert this to AngularJS context.  Now we have:</p>

<ul>
<li><code>visitplace</code> is our first route.</li>
<li>The place, it&rsquo;s surroundings and the hotel room are the contents of our template. Let&rsquo;s add it to <code>placetovisit.html</code>.</li>
<li>Tour coordinator is the one who connects to the place, so we have a controller called <code>TourCoordinatorCtrl</code>.</li>
</ul>


<figure class='code'><figcaption><span>Application (app.js)</span> <a href='http://www.undefinednull.com/downloads/code/angular_resolve/app.js'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span> <span class="s2">&quot;app&quot;</span><span class="p">,</span> <span class="p">[</span> <span class="p">]</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">$routeProvider</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$routeProvider</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span> <span class="s2">&quot;/visitplace&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;placetovisit.html&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="s2">&quot;TourCoordinatorCtrl&quot;</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span> <span class="s2">&quot;accommodation&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">hotelName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;Some Hotel&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">roomNo</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;203&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span> <span class="s2">&quot;TourCoordinatorCtrl&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">$scope</span><span class="p">,</span> <span class="nx">accommodation</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Shidhin&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">place</span> <span class="o">=</span> <span class="s2">&quot;Switzerland&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">hotel</span> <span class="o">=</span> <span class="nx">accommodation</span><span class="p">.</span><span class="nx">hotelName</span><span class="p">(</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">roomno</span> <span class="o">=</span> <span class="nx">accommodation</span><span class="p">.</span><span class="nx">roomNo</span><span class="p">(</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the templates <code>placetovisit.html</code> and <code>index.html</code> :</p>

<figure class='code'><figcaption><span>Template (placetovisit.html)</span> <a href='http://www.undefinednull.com/downloads/code/angular_resolve/placetovisit.html'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Trip details<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h2&gt;</span>Hi, {{name}}. Welcome to {{place}}<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>The accomodation is arranged on <span class="nt">&lt;strong&gt;</span>{{hotel}}<span class="nt">&lt;/strong&gt;</span> and room number is <span class="nt">&lt;strong&gt;</span>{{roomno}}<span class="nt">&lt;/strong&gt;&lt;/div&gt;</span>    
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span> <span class="na">ng-app=</span><span class="s">&quot;app&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>AngularJS Resolve routes example<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#/visitplace&quot;</span><span class="nt">&gt;</span>I want to go for a trip<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-view</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://ajax.googleapis.com/ajax/libs/AngularJS/1.0.1/angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything works as expected when we navigate to the route <code>/visitplace</code>. If you notice, the tour controller has a dependency on <code>accommodation</code> service. But it&rsquo;s just the controller&rsquo;s responsibility to find the hotel and room details. Also, getting the hotel and room details are completely synchronous events. That means, the room will be arranged before I reach the place.</p>

<p>But what if they&rsquo;re asynchronous events? Let&rsquo;s think this way: What If the tour coordinator is not so professional and he forgot to book the hotel and room. Because of this, when I arrive at the place, I&rsquo;d to wait till I get a new room. Similarly, in the code, we can see that the view is rendered, but the <code>getHotel()</code> and <code>getRoom()</code> methods taking extra time to get the room details.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span> <span class="s2">&quot;app&quot;</span><span class="p">,</span> <span class="p">[</span> <span class="p">]</span> <span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">$routeProvider</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$routeProvider</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span> <span class="s2">&quot;/visitplace&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;placetovisit.html&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="s2">&quot;TourCoordinatorCtrl&quot;</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span> <span class="s2">&quot;accommodation&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">$timeout</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">hotelName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">scope</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$timeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">hotel</span> <span class="o">=</span> <span class="s2">&quot;Some hotel&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">},</span><span class="mi">3000</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;---&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">roomNo</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">scope</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$timeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">roomno</span> <span class="o">=</span> <span class="s2">&quot;103&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">},</span><span class="mi">3000</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;---&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span> <span class="s2">&quot;TourCoordinatorCtrl&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">$scope</span><span class="p">,</span> <span class="nx">accommodation</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Shidhin&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">place</span> <span class="o">=</span> <span class="s2">&quot;Switzerland&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">hotel</span> <span class="o">=</span> <span class="nx">accommodation</span><span class="p">.</span><span class="nx">hotelName</span><span class="p">(</span> <span class="nx">$scope</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">roomno</span> <span class="o">=</span> <span class="nx">accommodation</span><span class="p">.</span><span class="nx">roomNo</span><span class="p">(</span> <span class="nx">$scope</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is not ideal in sometimes. I&rsquo;ve to render the view and wait for some of the data to be loaded. In my case, it&rsquo;s like I already started the trip and reached the place; but I&rsquo;m waiting in the place to get my accommodation. This is really annoying ! Is there any way to make sure that these dependencies are resolved before I start my journey ? Let&rsquo;s see :</p>

<h2>Version 2 of the Story</h2>

<p>This time, I&rsquo;ve a friend who is a hotel owner in Switzerland. He is a close friend of mine, so I can ask him for a room at any time. If I do this, I don&rsquo;t need to depend upon the accommodation provided by tour coordinator. Finally, all I have to do is, to make sure that I myself resolve the accommodation problem and tell the tour coordinator to arrange the rest.</p>

<p>This is exactly what we need if the route itself needs to resolve some dependencies in our application. For this, Angular provides a configuration on the <code>$routeProvider</code> service, called as <code>resolve</code>.  The resolve property is an optional map object / [ array of existing service names ]. All the keys of the map object can be injected to the controller as a dependency. The key would be a simple string, and it&rsquo;s value can be either a function or string. If string is provided, Angular will assume that it&rsquo;s an existing service and inject that particular service to the controller. If the value is a function, it will act as a factory function and the return value will be injected to the controller.</p>

<p>Let&rsquo;s relate our current story to Angular&rsquo;s context by using this resolve object. Look at our modified application code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span> <span class="s2">&quot;app&quot;</span><span class="p">,</span> <span class="p">[</span> <span class="p">]</span> <span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">$routeProvider</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$routeProvider</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span> <span class="s2">&quot;/visitplace&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;placetovisit.html&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="s2">&quot;TourCoordinatorCtrl&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;myFriendsHotel&quot;</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">hotelName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s2">&quot;My Friend&#39;s hotel&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="nx">roomNo</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s2">&quot;100&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span> <span class="s2">&quot;TourCoordinatorCtrl&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">$scope</span><span class="p">,</span> <span class="nx">myFriendsHotel</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Shidhin&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">place</span> <span class="o">=</span> <span class="s2">&quot;Switzerland&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">hotel</span> <span class="o">=</span> <span class="nx">myFriendsHotel</span><span class="p">.</span><span class="nx">hotelName</span><span class="p">(</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">roomno</span> <span class="o">=</span> <span class="nx">myFriendsHotel</span><span class="p">.</span><span class="nx">roomNo</span><span class="p">(</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: When controller is defined in the route, never initialise it again through ng-controller. That might throw an error when used with resolve configuration.</em></p>

<p>By doing this way, we can make sure that the controller initialisation is delayed till the hotel is ready. The view will be rendered only when the controller is initialised and a <code>$routeChangeSuccess</code> event will be fired. Also notice that, finding a hotel is a synchronous action; it means, since my friend is a hotel owner, I got a room immediately. In real world applications, most of the times we&rsquo;re going to deal with asynchronous actions. Let&rsquo;s move to the 3rd version of the story to sort that out.</p>

<h2>Final version of the Story</h2>

<p>Last time we saw that I&rsquo;d a friend who was a hotel owner. But in this version of the story, there is no hotel owner. This time, I&rsquo;ve another friend in Switzerland who knows some of the hotel owners and he can find me a better room for cheaper cost. Once I call him and tell that my requirements, he&rsquo;ll take some time to talk to his friends and arrange me a room. The time cannot be predictable; because my friend will ask his friends, and his friends may talk to their friends, and it can go on like this. But when I called him first, he gave me back a promise that he will surely update the status –– so that I can set up the rest. So, only when I get an update from him, I am going to call up the tour coordinator and ask him to set up the rest of arrangements.</p>

<p>Let&rsquo;s see the final version of our code  in Angular:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span> <span class="s2">&quot;app&quot;</span><span class="p">,</span> <span class="p">[</span> <span class="p">]</span> <span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">$routeProvider</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$routeProvider</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span> <span class="s2">&quot;/visitplace&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;placetovisit.html&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="s2">&quot;TourCoordinatorCtrl&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;accommodation&quot;</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">$q</span><span class="p">,</span> <span class="nx">$timeout</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">myFriend</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">$timeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">myFriend</span><span class="p">.</span><span class="nx">resolve</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">hotelName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="s2">&quot;My Friend&#39;s friend&#39;s hotel&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">roomNo</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="s2">&quot;404&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>        <span class="p">},</span><span class="mi">5000</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">myFriend</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span> <span class="s2">&quot;TourCoordinatorCtrl&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">$scope</span><span class="p">,</span> <span class="nx">accommodation</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Shidhin&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">place</span> <span class="o">=</span> <span class="s2">&quot;Switzerland&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">hotel</span> <span class="o">=</span> <span class="nx">accommodation</span><span class="p">.</span><span class="nx">hotelName</span><span class="p">(</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">roomno</span> <span class="o">=</span> <span class="nx">accommodation</span><span class="p">.</span><span class="nx">roomNo</span><span class="p">(</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Closely look at each lines and see the differences from the previous one. Did you notice that, this time we&rsquo;ve defined a variable <code>myFriend</code> inside the resolve function and initialised it using <code>$q.defer()</code>. The <strong>$q</strong> is the implementation of <em>Promises</em> API in AngularJS. It&rsquo;s inspired by the &ldquo;<strong>Q</strong>&rdquo; library implementation by kriskowal ( <a href="https://github.com/kriskowal/q">link</a> here ). If you don&rsquo;t know what a <em>Promise</em> is, then you should definitely check it out <a href="http://12devs.co.uk/articles/promises-an-alternative-way-to-approach-asynchronous-javascript/">here</a>.</p>

<p>What happens here is : Our resolve function has created the variable <code>myFriend</code> and it immediately returned the <code>myFriend.promise</code>. This means, we know that something is going to happen later and <code>myFriend</code> will update the result of that action to the promise returned. The action can be either successful or a failure. For a successful action, the promise will be resolved with the hotel room data; and for the failure action, the promise will be rejected with data ( mostly the error message ).</p>

<p>When the factory function returns a promise, the controller initialisation will wait till the promise gets resolved/rejected. Once the promise is resolved, the controller will be initialised and the resolved data will be injected to the controller. In our case, it&rsquo;s the <code>accommodation</code> object; after this, a <code>$routeChangeSuccess</code> event will be fired. There&rsquo;re also chances that, the first promise can return another promise. In that case, our controller initialisation will be delayed till all the promises are resolved. At any point, if any of the promises are rejected, the controller will not be initialised; instead a <code>$routeChangeError</code> event will be fired.</p>

<p>The <code>resolve</code> is very useful if we need to load some data upfront before the controller initialisation and rendering the view. In real world applications, the <code>$timeout</code> can be replaced with a <code>$http</code> object to load data from server. Since it&rsquo;s an asynchronous event, we can always make sure that our view will be rendered with proper data.</p>

<h2>That&rsquo;s the End of All Stories</h2>

<p>I tried to make these as clear I can. Hope everybody understood the concept of resolve in AngularJS routes. Feel free to comment for any improvements/ suggestions. Thanks for reading !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastering the scope of the directives in AngularJS]]></title>
    <link href="http://www.undefinednull.com/2014/02/11/mastering-the-scope-of-a-directive-in-angularjs/"/>
    <updated>2014-02-11T08:26:00+05:30</updated>
    <id>http://www.undefinednull.com/2014/02/11/mastering-the-scope-of-a-directive-in-angularjs</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-XOGfvAHr7HQ/UvoUItkZMZI/AAAAAAAAHJk/IJz5JcUB9dw/w520-h274-no/scopes_in_directives.png" alt="" /></p>

<h2>What are Directives</h2>

<p>Directives are one of the most powerful features of AngularJS. You can imagine them as building blocks ( aka re-usable components ) of any AngularJS application. Mastering all the directives, is totally out of this article’s scope. For that, I would really recommend this <a href="http://www.packtpub.com/AngularJS-directives/book">book</a>; it covers everything you need to know about directives. Here, we’ll discuss one aspect of directives called : &ldquo;<strong>Directive scope</strong>&rdquo;.</p>

<!--more-->


<h2>Scopes in AngularJS</h2>

<p>Unlike the other MVC frameworks, AngularJS doesn&rsquo;t have specific classes or functions to create <code>model</code> objects. Instead, AngularJS extended the raw JavaScript objects with custom methods and properties. These objects, also known as <code>scope</code> in AngularJS terms, work as a glue between the view and other parts ( directives, controllers and services ) inside the AngularJS application.</p>

<p>Whenever the AngularJS application is bootstrapped, a <code>rootScope</code> object is created. Each scope created by controllers, directives and services are prototypically inherited from <code>rootScope</code>. AngularJS documentation is one of the best resources to learn how scope inheritance works: see <a href="https://github.com/angular/angular.js/wiki/Understanding-Scopes">Scopes in AngularJS</a>. Understanding how scope inheritance works will be useful in following sections.</p>

<h2>Scope inside a directive</h2>

<p><em><strong>Note</strong>: This section assumes you&rsquo;ve prior knowledge of creating  a simple directive</em></p>

<p>All directives have a scope associated with them. They use this scope for accessing data/methods inside the template and link function. By default, unless explicitly set, directives don&rsquo;t create their own scope. Therefore, directives use their parent scope ( usually a controller ) as their own.</p>

<p>However, AngularJS allows us to change the default scope of directives by passing a configuration object known as <strong>directive definition object</strong>. A directive definition object –– let&rsquo;s call it as  <em>DDO</em> –– is a simple JavaScript object used for configuring the directive&rsquo;s behaviour,template..etc. Check out <a href="http://docs.AngularJS.org/guide/directive">AngularJS docs</a> about <em>DDO</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">,[]);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s2">&quot;myDirective&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">restrict</span><span class="o">:</span> <span class="s2">&quot;EA&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">scope</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span><span class="nx">elem</span><span class="p">,</span><span class="nx">attr</span><span class="p">){</span>
</span><span class='line'>          <span class="c1">// code goes here ...</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>    
</span><span class='line'>   <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above example, we created a directive by returning a <em>DDO</em> from the function. There are a lot of properties of the <em>DDO</em> to learn, but here we&rsquo;re just going to discuss the <code>scope</code> property, because, the values of scope property decides how the actual scope is created and used inside a directive. These values can be either <strong>&ldquo;false&rdquo;</strong>, <strong>&ldquo;true&rdquo;</strong> or <strong>&ldquo;{}&rdquo;</strong>. In the following sections, we&rsquo;ll see how each of these affects directive&rsquo;s behaviour.</p>

<h2>Different types of directive scopes</h2>

<p><u><strong>Scope :</u>  False</strong>  (  Directive uses its parent scope )</p>

<p>Let&rsquo;s try another example. We&rsquo;ll create simple directive to render a div and a textbox that can show and change a name. The <code>name</code> property gets the initial value from the <code>Ctrl1</code> scope ( parent scope of the directive ).</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/shidhincr/eyNYw/4/embedded/js,resources,html,css,result/light/"></iframe>


<p>If we change the name inside the textbox, notice the header name also gets changed. Since there&rsquo;s no scope provided in the <em>DDO</em>, the directive uses its parent scope. Therefore, any changes we make inside the directive are actually reflected in the parent scope. Similarly, parent <code>Ctrl1</code> scope has  a method to reverse the name and this gets triggered when we click on the header. Now as we expect, clicking on the header should reverse the name inside the directive too.</p>

<p><u> <strong>Scope :</u> True</strong>  ( Directive gets a new scope )</p>

<p>Now it&rsquo;s time for the directive to get its own scope. This is achieved by setting a &ldquo;true&rdquo;  value to the scope property of the <em>DDO</em>. When directive scope is set to &ldquo;true&rdquo;, AngularJS will create a new scope object and assign to the directive. This newly created scope object is prototypically inherited from its parent scope ( the controller scope where it&rsquo;s been used ).</p>

<p>Confused ? Let&rsquo;s see the exact differences between setting <code>scope: true</code> and <code>scope: false</code> :</p>

<ul>
<li>When scope is set to &ldquo;<strong>true</strong>&rdquo;, AngularJS will create a new scope by inheriting parent scope ( usually controller scope, otherwise the application&rsquo;s rootScope ). Any changes made to this new scope will not reflect back to the parent scope. However, since the new scope is inherited from the parent scope, any changes made in the <code>Ctrl1</code> ( the parent scope ) will be reflected in the directive scope.</li>
<li>When scope is set to &ldquo;<strong>false</strong>&rdquo;, the controller <code>Ctrl1</code> and directive are using the same scope object. This means any changes to the controller or directive will be in sync.</li>
</ul>


<p>Let&rsquo;s look at the following fiddle to make it more clear :</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/shidhincr/q3kex/3/embedded/js,resources,html,css,result/light/"></iframe>


<p>First, try clicking on the header. We can see that the name gets reversed inside controller <code>Ctrl1</code> and the directive. Next, change the name inside the textbox; the parent <code>scope</code> is not at all affected.</p>

<p><em><strong>Note:</strong> Clicking on header again, makes no changes to the directive <code>scope</code>. I guess this is because the <code>ng-model</code> will create a new name property only when the textbox value is changed. Before this, name property inside directive was referring to it&rsquo;s parent <code>scope</code> ( through prototype chain )</em></p>

<p><u> <strong>Scope :</u>  { }</strong> ( Directive gets a new isolated scope )</p>

<p>This is the most interesting section. Till now, we saw two situations for directive scope creation. In the third type, we are going to set scope property in <em>DDO</em>  to an <strong>Object literal</strong>. When an object literal is passed to the scope property, things are bit different. This time, there will be a new scope created for the directive, but it <strong>will not be inherited from the parent scope</strong>. This new scope also known as <strong>Isolated scope</strong> because it is completely detached from its parent scope.</p>

<p>Let&rsquo;s re-write our original example like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">,[]);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s2">&quot;myDirective&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">restrict</span><span class="o">:</span> <span class="s2">&quot;EA&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">scope</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>      <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span><span class="nx">elem</span><span class="p">,</span><span class="nx">attr</span><span class="p">){</span>
</span><span class='line'>          <span class="c1">// code goes here ...</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>    
</span><span class='line'>   <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far, this is the recommended way of setting the <code>scope</code> on <em>DDO</em> while creating custom directives. Why? Because:</p>

<ul>
<li>It&rsquo;ll make sure that our directive is generic, and placed anywhere inside the application. Parent scope is not going to interfere with the directive scope.</li>
</ul>


<p>Though it&rsquo;s called as an <em>Isolated scope</em>, AngularJS allows to communicate with the parent scope using some special symbols knows as <strong><code>prefixes</code></strong>. Because of course there are still situations where the directive needs to be able to exchange data with parent scope. The next section is  dedicated to <em>Isolated scope</em> and its properties.</p>

<h2>Isolated Scope Explained</h2>

<p>See the below fiddle:</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/shidhincr/q3kex/4/embedded/js,resources,html,css,result/light/"></iframe>


<p>We just created a directive with an isolated scope. Notice, even the parent scope has a name &ldquo;Harry&rdquo;, the textbox inside directive is blank. This is because of the new <em>Isolated scope</em> doesn&rsquo;t know anything about its parent scope.</p>

<p><strong>But, can we pass some values from the parent <code>scope</code> to the directives now?</strong></p>

<p>Yes ! Not only that, we might need to handle situations like invoking callbacks in parent scope, two-way binding between parent &amp; directives scope ..etc</p>

<p>To access any parent scope data, we need to pass that to our directive explicitly. This is achieved by setting properties on the scope object in the <em>DDO</em>. Imagine these properties as interfaces of the directive to communicate with outside scope. Another important thing is that, these properties also <strong>MUST</strong> be set as the attributes of the directive html element. If this confusing, let me explain with an example:</p>

<p>Just go through the below fiddle, and look at the &ldquo;HTML&rdquo;, &ldquo;JavaScript&rdquo; and  &ldquo;Results&rdquo; tabs.</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/shidhincr/pJLT8/10/embedded/js,resources,html,css,result/light/"></iframe>


<p>Let&rsquo;s try to understand how this works. Take the JavaScript code first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;app&quot;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'> <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;MainCtrl&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">$scope</span> <span class="p">){</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Harry&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s2">&quot;#333333&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">reverseName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>     <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">reverse</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">randomColor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s1">&#39;#&#39;</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">16777215</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s2">&quot;myDirective&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">restrict</span><span class="o">:</span> <span class="s2">&quot;EA&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">scope</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;@&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">color</span><span class="o">:</span> <span class="s2">&quot;=&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">reverse</span><span class="o">:</span> <span class="s2">&quot;&amp;&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">template</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;&lt;div class=&#39;line&#39;&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Name : &lt;strong&gt;&lt;/strong&gt;;  Change name:&lt;input type=&#39;text&#39; ng-model=&#39;name&#39; /&gt;&lt;br/&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;&lt;/div&gt;&lt;div class=&#39;line&#39;&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Color : &lt;strong style=&#39;color:&#39;&gt;&lt;/strong&gt;;  Change color:&lt;input type=&#39;text&#39; ng-model=&#39;color&#39; /&gt;&lt;br/&gt;&lt;/div&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;&lt;br/&gt;&lt;input type=&#39;button&#39; ng-click=&#39;reverse()&#39; value=&#39;Reverse Name&#39;/&gt;&quot;</span>
</span><span class='line'>        <span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s clear that, the controller <code>MainCtrl</code> creates the parent scope. This parent scope has following properties and methods.</p>

<pre><code>name = "Harry"
color =  "#333333"
reverseName = function for reversing the name
randomColor = function for generating random color code
</code></pre>

<p>Similarly, we&rsquo;ve created our directive in <em>Isolated scope</em> by setting an object literal in the <em>DDO</em>. Notice our scope object has some properties now :</p>

<pre><code>scope: {
        name: "@",
        color: "=",
        reverse: "&amp;"
    }
</code></pre>

<p>Look at the directive template and we can see the scope properties are used there. Mostly the directive&rsquo;s templates and link function are going to consume the scope properties. The behaviour of these properties again depends on their values –– also known as  <strong><em>Prefixes</em></strong>  –– provided. These  <strong><em>Prefixes</em></strong> are used to bind the parent scope&rsquo;s methods and properties to the directive scope.</p>

<p>There&rsquo;re 3 types of prefixes AngularJS provides.</p>

<pre><code>1. "@"   (  Text binding / one-way binding )
2. "="   ( Direct model binding / two-way binding )
3. "&amp;"   ( Behaviour binding / Method binding  )
</code></pre>

<p>All these prefixes receives data from the attributes of the directive element. Let&rsquo;s take another look at the HTML code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">my-directive</span>
</span><span class='line'>  <span class="na">class=</span><span class="s">&quot;directive&quot;</span>
</span><span class='line'>  <span class="na">name=</span><span class="s">&quot;{{name}}&quot;</span>
</span><span class='line'>  <span class="na">reverse=</span><span class="s">&quot;reverseName()&quot;</span>
</span><span class='line'>  <span class="na">color=</span><span class="s">&quot;color&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>When the directive encounters a prefix in the scope property, it will look for an attribute ( with same property name ) on directive&rsquo;s html element. However, we can provide a different mapping between property and attributes. This is done by giving a separate attribute name after the prefix. Look at below code to make it more clear.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">scope</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;@&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above will be mapped to an attribute &ldquo;name&rdquo; in the directive. Now let&rsquo;s see what happens if we change the code like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">scope</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;@parentName&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this time, the name property will be looking for an attribute &ldquo;parentName&rdquo; to get its value. Simply, any string after the  <strong><em>Prefixes</em></strong> should match the attribute name.</p>

<p><em><strong>Note</strong> : If you gets confused in any of the sections below, have a look at the demo code ( HTML,JS ) and come back</em></p>

<ul>
<li><p>The &ldquo;@&rdquo; prefix is a one-way binding between the directive scope and parent scope. It always expects the mapped attribute to be an expression. This is very important; because to make the &ldquo;@&rdquo; prefix work, we need to wrap the attribute value inside <code>{{}}</code>. Since &ldquo;@&rdquo; is creating a one-way binding between the parent and directive scope, any changes made in the parent scope will reflect inside the directive scope, but not the other way. &ldquo;@&rdquo; prefix is really useful when our directive needs to be initialised with some data from parent scope.
  <div class='info'>
  See this in demo by clicking on the &ldquo;Reverse name&rdquo; button in the parent scope. You can see that names inside parent and directive scopes gets reversed. Now let&rsquo;s change the name from the directive&rsquo;s textbox; you can see that the changes will be applicable only to the directive scope.
  </div></p></li>
<li><p>Secondly we have the &ldquo;=&rdquo; prefix. It creates a two-way binding between the parent and directive scope. The most important point about &ldquo;=&rdquo; prefix is, it&rsquo;ll always expect the attribute value to be the <code>model</code> name. That means you cannot provide an expression as the value of attribute mapped to &ldquo;=&rdquo; prefix. This is useful, when any of our directive scope property to be same as the parent scope property.
  <div class='info'>
  In the demo, try clicking on the &ldquo;Randomize color&rdquo; button and observe the changes inside the parent and directive scopes. Similarly, try changing the color textbox and you can see that the parent scope color also gets changed.
  </div></p></li>
<li><p>Finally, we&rsquo;re going to talk about the last prefix. The &ldquo;&amp;&rdquo; prefix is also known as a method binding. This is used to bind any methods from the parent scope to the directive scope. This will be particularly useful when our directive needs to execute any callbacks in the parent scope. Look at the code to see how attribute value for the &ldquo;&amp;&rdquo; prefix to be set.
  <div class='info'>
  Parent scope has a method called &ldquo;reverseName&rdquo;. Through our &ldquo;&amp;&rdquo; prefix, we bound the &ldquo;reverseName&rdquo; method to a scope property named &ldquo;reverse&rdquo;. So whenever the &ldquo;reverse()&rdquo; method is executed inside the directive, it&rsquo;ll basically invoke the &ldquo;reverseName&rdquo; in the parent scope. Click on the &ldquo;Reverse name&rdquo; inside directive to see it in action.
  </div></p></li>
</ul>


<p>I know that AngularJS have made these things a little bit difficult to understand. Especially when it comes to the random naming conventions they&rsquo;d chosen. If you’re still confused, I would recommend having a look at the below article:</p>

<p><a href="http://umur.io/AngularJS-directives-using-isolated-scope-with-attributes/">AngularJS directives: Isolated scope prefixes </a> . This one explains the <em>Isolated scope</em>  and it&rsquo;s properties neatly.</p>

<p>That&rsquo;s it !  This post ended up becoming much longer than I expected, because I wanted to include everything I know. I hope everyone enjoyed reading this. If you find any errors I would really appreciate it if you guys could send me your corrections and comments ––  the comment box is made just for that. Thanks everyone !!</p>

<p>Special thanks to <em>David Tulip</em> for proof-reading and helping me to fix grammatical errors.</p>

<p><u><strong>Further Read :</strong></u></p>

<ol>
<li><a href="https://github.com/angular/angular.js/wiki/Understanding-Scopes">https://github.com/angular/angular.js/wiki/Understanding-Scopes</a></li>
<li><a href="http://amitgharat.wordpress.com/2013/06/08/the-hitchhikers-guide-to-the-directive/">http://amitgharat.wordpress.com/2013/06/08/the-hitchhikers-guide-to-the-directive/</a></li>
<li><a href="http://www.ng-newsletter.com/posts/directives.html">http://www.ng-newsletter.com/posts/directives.html</a></li>
<li><a href="https://egghead.io/lessons/AngularJS-understanding-isolate-scope">https://egghead.io/lessons/AngularJS-understanding-isolate-scope</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Left-hand assignment in JavaScript, is really bad. Think before you do it.]]></title>
    <link href="http://www.undefinednull.com/2014/02/03/multiple-left-hand-assignment-in-javascript-is-really-bad-think-once-before-you-do-it/"/>
    <updated>2014-02-03T12:04:00+05:30</updated>
    <id>http://www.undefinednull.com/2014/02/03/multiple-left-hand-assignment-in-javascript-is-really-bad-think-once-before-you-do-it</id>
    <content type="html"><![CDATA[<p><strong>“JavaScript allows multiple left-hand assignments”</strong></p>

<p>You may ask, what does that mean ? Well, if you’re not familiar, in JavaScript you can write the variable assignment expressions like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">d</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The assignment expressions are always evaluated from right-to-left. So what the above expression actually does is, assign the value <code>10</code> to the variable <code>d</code>, then assign the value of <code>d</code> to <code>c</code> and so on. <!--more-->Finally all the variables will get the value <code>10</code>. This kind of &ldquo;short-hand&rdquo; code will allows you to get rid of the repetitive code; especially when you want to initialise multiple variables with an initial value.</p>

<h3>And what’s the catch here ?</h3>

<p>Well, in simple words: <strong>“the scope“</strong>  . To understand that, let’s move the same expression inside a function. Like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span> <span class="p">(){</span>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">d</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you expect all of these variables are having a scope local to the function <code>foo</code>, then you’re wrong. What happens here is, the var statement is only applicable to the variable <code>a</code>. And all the other variables are considered with out the <code>var</code> statement, hence will be the global. Try executing foo method, you would see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">foo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">a</span> <span class="c1">// undefined</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">b</span> <span class="c1">// will be 10</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">c</span> <span class="c1">// will be 10</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">d</span> <span class="c1">// will be 10 </span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, that’s the catch ! So avoid multiple left-hand assignments inside any functions. If you’re writing this in global level ( you’re assuming all of your variables to go in global scope ), then this is not at all an issue. So better watch out next time before you do this.</p>

<h3>Final note</h3>

<p>If  you&rsquo;re not convinced and still want to do left-hand assignments, then the right way of doing it is like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">d</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Declaring all the variables in the first line is <strong>one of the good coding style</strong>. This will make sure that you’re not the victim of scope issues and hoisting problems.  So always read about the JavaScript best practices, and adhere to good coding style.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting VerbalRegex.com open source project]]></title>
    <link href="http://www.undefinednull.com/2014/01/29/starting-verbalregex-dot-com-open-source-project/"/>
    <updated>2014-01-29T01:09:00+05:30</updated>
    <id>http://www.undefinednull.com/2014/01/29/starting-verbalregex-dot-com-open-source-project</id>
    <content type="html"><![CDATA[<p>On the other day, while exploring the Github repositories, this one grabbed my attention.</p>

<p><a href="https://github.com/VerbalExpressions/JSVerbalExpressions">https://github.com/VerbalExpressions/JSVerbalExpressions</a></p>

<p>I like this idea so much. In fact, I also were trying to build something similar. Writing regular expressions were always a tedious task for me. I&rsquo;ve tried learning it enormous times, but still when I want to construct one, I&rsquo;ve to google around.</p>

<!-- more -->


<p>So that&rsquo;s why this project got my interest. The idea is pretty cool; Instead of remembering all those complex patterns of regular expressions, I can just use the simple API provided by the library. That&rsquo;s really cool!</p>

<p>But again, There&rsquo;s a limitation: It&rsquo;s just a JavaScript library that can be used inside the code only. What I really wanted is an user interface where I can use some simple steps –– mostly like the API methods of the above library –– to build my final regular expression.</p>

<p>That&rsquo;s when I started working on a new website called <a href="VerbalRegex.com">http://wwww.verbalregex.com</a>. The website is not live yet. I&rsquo;ve created the repository in Github and started working on the UI of it.</p>

<ul>
<li><p>The tools used so far are:</p>

<pre><code>- Yeo man for scaffolding
- AngularJS 
- Angular UI and Twitter Bootstrap
- Grunt
- Karma ( unit testing )
</code></pre></li>
</ul>


<p>The project is in the very early stage. I&rsquo;ve invited some of my friends for the contribution. Once all the designs and requirements ready, the project will find it&rsquo;s momentum.</p>

<p>Here is a screenshot of what I&rsquo;ve built so far.</p>

<p><img src="https://lh5.googleusercontent.com/-oNcO5nhOIwQ/UugGMrn13mI/AAAAAAAAG_c/DSUWGrNxGAw/w958-h495-no/Screen+Shot+2014-01-29+at+1.03.33+am.png" alt="verbalregex.com" /></p>

<p>I&rsquo;m trying to work more on this project on my spare times. Hope everything will go well !!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Blog Tweaks: Adding Author Info Section Below Each Posts]]></title>
    <link href="http://www.undefinednull.com/2013/10/15/octopress-blog-tweaks-adding-author-information-section-below-each-posts/"/>
    <updated>2013-10-15T10:15:00+05:30</updated>
    <id>http://www.undefinednull.com/2013/10/15/octopress-blog-tweaks-adding-author-information-section-below-each-posts</id>
    <content type="html"><![CDATA[<p>A good blogging platform is one which allows easy customization. I&rsquo;ve been using Octopress for more than 2 weeks and happy to tell that it&rsquo;s one of those allows customization with out any pain. I want to share a tweak I added to my blog recently : It&rsquo;s an author information section below every post. Let&rsquo;s see how I built it and added to my blog.</p>

<!--more-->


<h2>What we&rsquo;re going to achieve</h2>

<p><img src="http://www.undefinednull.com//lh3.googleusercontent.com/-hT72wlBvU-Y/UlzR3V8twdI/AAAAAAAACP0/2aoFaMfzjA0/s916/Screen%2520Shot%25202013-10-15%2520at%252010.57.29%2520AM.png"></p>

<p>See the above screenshot ? It&rsquo;s a simple section containing the author image, description and a twitter follow button. I&rsquo;ll explain how to build this and add to every post.</p>

<h2>Let&rsquo;s Begin</h2>

<p>Octopress is basically based on Jekyll and liquid templating. Everything in the main view is broken-down to subviews called partials. These partials are nothing but re-usable html files which will be included in other views. So for creating our author information section, we also need to create a partial and include it in the post view.</p>

<p>Before start creating our author information view, let&rsquo;s analyse the files and folders we&rsquo;re interested in.</p>

<p>Open the octopress blog folder and get familiar with these:</p>

<ol>
<li> source/_layouts/post.html</li>
<li> source/_includes/custom/</li>
<li> sass/custom/_styles.scss</li>
<li> source/images/</li>
</ol>


<p><strong>source/_layouts/post.html</strong></p>

<p>This is the partial responsible for rendering the blog post entry. We need to make modifications in this view to show any changes in the post.</p>

<p><strong>source/_includes/custom/</strong></p>

<p>This folder contains custom partials –– usually from the 3rd party plugins and all. We&rsquo;re going to add our view html file here only.</p>

<p><strong>sass/custom/_styles.scss</strong></p>

<p>Octopress uses SCSS ( a CSS preprocessor ) for all of it&rsquo;s styling and theming. This particular file will be processed at the end, hence any custom styles required for the blog are added in this file only.</p>

<p><strong>source/images/</strong></p>

<p>All the image assets goes to this folder.</p>

<p>Time to create the view for the author information section. I&rsquo;ve created a new file called <strong>&ldquo;aboutauthor.html&rdquo;</strong> (code is given below ) and placed in the <strong><code>source/_includes/custom/</code></strong> folder. It&rsquo;s just the sample and you can create your own template.</p>

<figure class='code'><figcaption><span>aboutauthor.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;about&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;about-image&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/images/author.jpg&quot;</span> <span class="na">alt=</span><span class="s">&quot;author name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/span&gt;</span>
</span><span class='line'>     <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;about-desc&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;span&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</span><span class='line'>          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
</span><span class='line'>          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
</span><span class='line'>          consequat.<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>          <span class="nt">&lt;br/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;hr/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;https://twitter.com/yourtwittername&quot;</span> <span class="na">class=</span><span class="s">&quot;twitter-follow-button&quot;</span> <span class="na">data-show-count=</span><span class="s">&quot;false&quot;</span> <span class="na">data-size=</span><span class="s">&quot;large&quot;</span><span class="nt">&gt;</span>Follow @yourtwittername<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code is self explanatory. One more extra effort is to add the author image –– which should go to the <strong><code>source/images/</code></strong> folder. I&rsquo;ve used a jpeg image of dimension <code>175x120</code>.</p>

<p>To apply some CSS for our view, open the <strong>&ldquo;_styles.scss&rdquo;</strong> and add the following rules.</p>

<figure class='code'><figcaption><span>_styles.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.about</span> <span class="p">{</span>
</span><span class='line'>     <span class="na">font-style</span><span class="o">:</span> <span class="no">italic</span><span class="p">;</span>
</span><span class='line'>     <span class="na">background-color</span><span class="o">:</span> <span class="mh">#FFF</span><span class="p">;</span>
</span><span class='line'>     <span class="na">padding</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>     <span class="na">border-radius</span><span class="o">:</span> <span class="mi">5</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>     <span class="na">border</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="mh">#CCC</span><span class="p">;</span>
</span><span class='line'>     <span class="na">box-shadow</span><span class="o">:</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">5</span><span class="kt">px</span> <span class="mh">#CCC</span><span class="p">;</span>
</span><span class='line'>     <span class="na">overflow</span><span class="o">:</span> <span class="no">hidden</span><span class="p">;</span>
</span><span class='line'>     <span class="na">clear</span><span class="o">:</span> <span class="no">both</span><span class="p">;</span>
</span><span class='line'>     <span class="nc">.about-image</span> <span class="p">{</span>
</span><span class='line'>          <span class="na">width</span><span class="o">:</span> <span class="mi">150</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>          <span class="na">float</span><span class="o">:</span> <span class="no">left</span><span class="p">;</span>
</span><span class='line'>          <span class="na">display</span><span class="o">:</span> <span class="no">inline</span><span class="o">-</span><span class="no">block</span><span class="p">;</span>
</span><span class='line'>          <span class="na">margin-right</span><span class="o">:</span> <span class="mi">20</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="nc">.about-desc</span> <span class="o">&gt;</span> <span class="nt">hr</span> <span class="p">{</span>
</span><span class='line'>          <span class="na">border</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'>          <span class="na">border-top</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">dotted</span> <span class="mh">#CCC</span><span class="p">;</span>
</span><span class='line'>          <span class="na">padding-top</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="nn">#twitter-widget-1</span> <span class="p">{</span>
</span><span class='line'>          <span class="na">float</span><span class="o">:</span> <span class="no">right</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Update Post Template</h2>

<p>Now we&rsquo;ve the CSS and Markup ready for our author information view. We can add the <strong>&ldquo;aboutauthor.html&rdquo;</strong> view to any other view by using <code>include</code> keyword. Let&rsquo;s open the <strong><code>source/_layouts/post.html</code></strong> partial and include our newly created view below the post content.</p>

<p>Here is the diff file for <strong><em>updated post.html</em></strong> :</p>

<div><script src='https://gist.github.com/6989638.js'></script>
<noscript><pre><code> &lt;div&gt;
 &lt;article class=&quot;hentry&quot; role=&quot;article&quot;&gt;
   {% include article.html %}
   &lt;footer&gt;
     &lt;p class=&quot;meta&quot;&gt;
       {% include post/author.html %}
       {% include post/date.html %}{% if updated %}{{ updated }}{% else %}{{ time }}{% endif %}
       {% include post/categories.html %}
     &lt;/p&gt;
     {% unless page.sharing == false %}
       {% include post/sharing.html %}
     {% endunless %}
     &lt;p class=&quot;meta&quot;&gt;
+    {% include custom/aboutauthor.html %}
+    &lt;/p&gt;
+    &lt;p class=&quot;meta&quot;&gt;
       {% if page.previous.url %}
         &lt;a class=&quot;basic-alignment left&quot; href=&quot;{{page.previous.url}}&quot; title=&quot;Previous Post: {{page.previous.title}}&quot;&gt;&amp;laquo; {{page.previous.title}}&lt;/a&gt;
       {% endif %}
       {% if page.next.url %}
         &lt;a class=&quot;basic-alignment right&quot; href=&quot;{{page.next.url}}&quot; title=&quot;Next Post: {{page.next.title}}&quot;&gt;{{page.next.title}} &amp;raquo;&lt;/a&gt;
       {% endif %}
     &lt;/p&gt;
   &lt;/footer&gt;
 &lt;/article&gt;
 {% if site.disqus_short_name and page.comments == true %}
   &lt;section&gt;
     &lt;h1&gt;Comments&lt;/h1&gt;
     &lt;div id=&quot;disqus_thread&quot; aria-live=&quot;polite&quot;&gt;{% include post/disqus_thread.html %}&lt;/div&gt;
   &lt;/section&gt;
 {% endif %}
 &lt;/div&gt;
 {% unless page.sidebar == false %}
 &lt;aside class=&quot;sidebar&quot;&gt;
   {% if site.post_asides.size %}
     {% include_array post_asides %}
   {% else %}
     {% include_array default_asides %}
   {% endif %}
 &lt;/aside&gt;
 {% endunless %}</code></pre></noscript></div>


<h2>Preview it</h2>

<p>Use below rake commands to preview the blog.</p>

<pre><code>rake generate; rake preview
</code></pre>

<p>That&rsquo;s it !! The author information section should be appearing below each blog post by now. Replace the &ldquo;Lorum ipsum&rdquo; with the words best describes you.</p>

<p>Thanks for reading, feedbacks are welcome. Enjoy blogging !!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ Some Gotchas In Arithmetic Expression Evaluation : JavaScript]]></title>
    <link href="http://www.undefinednull.com/2013/09/26/some-gotchas-in-arithmetic-expression-evaluation-javascript/"/>
    <updated>2013-09-26T16:15:00+05:30</updated>
    <id>http://www.undefinednull.com/2013/09/26/some-gotchas-in-arithmetic-expression-evaluation-javascript</id>
    <content type="html"><![CDATA[<h2>Solve a small problem in JavaScript</h2>

<p>This post is just for recollecting some of the basics of JavaScript. Let&rsquo;s start with a small JavaScript code. Here is the code –– Solve it with out using the console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="p">(</span> <span class="nx">a</span> <span class="o">-</span> <span class="p">(</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">(</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="p">)</span> <span class="o">-</span> <span class="nx">b</span> <span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take your own time to come up with an answer before moving to the next section.</p>

<!-- more -->


<h2>Analyzing the problem</h2>

<p>If your answer is <code>a = 3 and b = 5</code>, this post is written for you. Open your favorite browser and fire up the console. Put the above code in the console and see the values of <code>a</code> and <code>b</code> now.</p>

<p>Stunned ?  Yeah, The values of <code>a</code> and <code>b</code> are <code>a = 0  and b = 5</code> now. Honestly I also got it wrong initially. I did ask this question to some of my friends ( who are in JavaScript circle ),  and all of them gave me wrong answer.</p>

<h2>Some flashback</h2>

<p>So, here is how I arrived this to particular question. Last week I was trying to write the code for an interview problem in JavaScript  and it&rsquo;s a very common one –– How to swap values of 2 variables with out using a 3rd variable.</p>

<p>Let the variables be <code>a = 5</code> and <code>b = 3</code>. Swap the values of <code>a</code> and <code>b</code> with out using any 3rd variable .</p>

<p>Solution is simple . Just do the following arithmetic operations</p>

<pre><code>a = a + b
b = a - b
a = a - b
</code></pre>

<p>This will do the job.</p>

<p>What I was trying is to write the entire expression in one single line. I wrote it like below.</p>

<p><strong>Code 1 :</strong></p>

<figure class='code'><figcaption><span>CODE 1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="p">(</span> <span class="nx">a</span> <span class="o">-</span> <span class="p">(</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">(</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="p">)</span> <span class="o">-</span> <span class="nx">b</span> <span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool .. I thought it&rsquo;s done.</p>

<p>But I got surpriced when I tried it in the console. I was expecting final values should be <code>a = 3 and b = 5</code> but the output was different. I got <code>a = 0 and b =5</code>.</p>

<p>WTF ? Let me change the code a bit. I modified the code like this</p>

<p><strong>Code 2 :</strong></p>

<figure class='code'><figcaption><span>CODE 2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="p">(</span> <span class="p">(</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">(</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="p">)</span> <span class="o">-</span> <span class="nx">b</span> <span class="p">)</span> <span class="o">-</span> <span class="nx">a</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
This time I got the correct results <code>a = -3 and b = 5</code>. So why the hell it didn&rsquo;t work for the first expression ?</p>

<h2>The answer is :</h2>

<p>We&rsquo;re evaluating it wrongly. I mean we are not doing the way JavaScript engine does. I went to the EcmaScript specification and read the section for &ldquo;Arithmetic Expression&rdquo;.</p>

<blockquote><p>Expressions : Any valid unit code that resolves to some value.</p></blockquote>

<p><strong>Two things to note :</strong></p>

<ul>
<li>Assignment operators are right to left associative. That means for the expression <code>a = b = 5</code>, the value <code>5</code> will be assigned to variable <code>b</code> and then assigned to variable <code>b</code>.</li>
<li>Arithmetic and multiplicative operators are left to right associative. For the expression <code>c = a + b</code>, the value of <code>a</code> will be computed first, then goes to <code>b</code> and computes it&rsquo;s value.</li>
</ul>


<p>For our problem, if I draw the parse tree roughly, it will be like below.</p>

<pre><code>   =
 /   \
a     -
    /   \
   a     =
       /   \
      b     -
          /   \
         =      b
       /   \
      a     +
          /   \
         a     b
</code></pre>

<p>Ideally parse tree doesn&rsquo;t contain the <code>=</code> operator. I made it like this to understand how the parser start evaluating the expression.</p>

<p>In the above parse tree, all the <code>=</code> operators are evaluated from right-to left ( that means the right node will be evaluated first and the value will be assigned to the left node ). On the other hand, arithmetic/multiplicative expressions are evaluated from left to right ( that means the values will be assigned from left and the arithmetic/multiplicative operation will be carried out ).</p>

<p>We can identify sub-expressions in our code. Basically, we can extract the expressions containing <code>=</code> to sub-expressions. Hence the above parse tree can be re-drawn like below.</p>

<pre><code>   =
 /   \
a     -
    /   \
   a     X
</code></pre>

<p>Where <code>X</code> is the <strong>Sub-Expression 1</strong> given below :</p>

<pre><code>         =
       /   \
      b     -
          /   \
         Y     b
</code></pre>

<p>Where <code>Y</code> is the <strong>Sub-Expression 2</strong> given below :</p>

<pre><code>         =
       /   \
      a     +
          /   \
         a     b
</code></pre>

<p>Let&rsquo;s see how JavaScript parser evaluate the value of <code>a</code> finally.</p>

<h3>Steps :</h3>

<ul>
<li><p>Parser takes the main expression <code>a = a - X</code> and evaluated from left to right. At first, parser finds the variable<code>a</code> and finds it&rsquo;s value. Now the parser moves to the next variable <code>X</code> and try to calculate it&rsquo;s value. Since <code>X</code> is an expression, it need to be evaluated to form a primitive value.</p>

<p>  <em>Note: To get the value, parser internally calls the <a href="http://es5.github.io/#x8.7.1">GetValue</a> of each operands</em></p>

<p>  So, for the parser, the expression becomes  like this :</p></li>
</ul>


<figure class='code'><figcaption><span>Value Of &#8220;a&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">a</span> <span class="p">)</span> <span class="o">-</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">Evaluate</span><span class="p">(</span> <span class="nx">X</span> <span class="p">)</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is :</p>

<figure class='code'><figcaption><span>Value of &#8220;a&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">-</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">Evaluate</span><span class="p">(</span> <span class="nx">X</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li><p>Now it need to evaluate the expression <code>X</code> where <code>b = Y - b</code>. Here the first operand <code>Y</code> itself a sub-expression, so parser has to evaluate it first before calculating the value of the second operand <code>b</code>.</p></li>
<li><p>Let&rsquo;s evaluate the expression <code>Y</code> which is <code>a = a + b</code>. This is straightforward and contains no sub expression , hence evaluated like this.</p></li>
</ul>


<figure class='code'><figcaption><span>New value of &#8220;a&#8221; is</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">a</span> <span class="p">)</span> <span class="o">+</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">b</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This equals to :</p>

<figure class='code'><figcaption><span>&#8220;a&#8221; became 8   </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
Finally the value of expression <code>Y</code> becomes <code>8</code>.</p>

<ul>
<li>Coming back to step 2 where expression <code>X</code> needs to be completed. expression <code>X</code> is</li>
</ul>


<figure class='code'><figcaption><span>Computing the value of &#8220;b&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">b</span> <span class="o">=</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">Y</span> <span class="p">)</span> <span class="o">-</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">b</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Becomes like this :</p>

<figure class='code'><figcaption><span>Value of &#8220;b&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">b</span> <span class="o">=</span> <span class="mi">8</span> <span class="o">-</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">b</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is :</p>

<figure class='code'><figcaption><span>Final value of &#8220;b&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">b</span> <span class="o">=</span> <span class="mi">8</span> <span class="o">-</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally the value of <code>b</code> and expression <code>X</code> becomes <code>5</code>.</p>

<ul>
<li>So now all the sub expressions are evaluated , the main expression can be completed now.</li>
</ul>


<p>The main expression was :</p>

<figure class='code'><figcaption><span>Evaluating the main expression</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">-</span> <span class="nx">GetValue</span><span class="p">(</span> <span class="nx">X</span> <span class="p">)</span> <span class="p">;</span> <span class="c1">// value of X = 5 now</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>That means final value of <code>a = 5 - 5</code>  which is <code>0</code>.</p>

<ul>
<li>Finally the values of <code>a</code> and <code>b</code> will become <code>a = 0 and b = 5</code></li>
</ul>


<p>Now we&rsquo;re in the same direction with JS engine. We can apply what we learned for the <strong>Code 2</strong> also.</p>

<h2>Conclusion</h2>

<p>I didn&rsquo;t want to write this much long. All I wanted to recollect some of those basic stuff. Thanks for reading !!</p>

<p> References :</p>

<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators</a></li>
<li><a href="http://www.ecma-international.org/ecma-262/5.1/#sec-8.7">http://www.ecma-international.org/ecma-262/5.1/#sec-8.7</a></li>
<li><a href="http://es5.github.io/#x8.7.1">http://es5.github.io/#x8.7.1</a></li>
<li><a href="http://stackoverflow.com/questions/19045411/can-somebody-explain-how-javascript-arithmetic-expressions-work">http://stackoverflow.com/questions/19045411/can-somebody-explain-how-javascript-arithmetic-expressions-work</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting my new blog: Finally Octopress]]></title>
    <link href="http://www.undefinednull.com/2013/09/25/starting-my-new-blog-finally-octopress/"/>
    <updated>2013-09-25T07:36:00+05:30</updated>
    <id>http://www.undefinednull.com/2013/09/25/starting-my-new-blog-finally-octopress</id>
    <content type="html"><![CDATA[<h2>Finally Octopress !!</h2>

<p>I wanted to start writing blog ever since I started coding. I never had a success setting it up because of time constraints and many other reasons. During this time, I&rsquo;ve evaluated a number of blogging platforms and eventually I thought of using wordpress as my blogging platform when I start my blog.</p>

<p>Now finally I&rsquo;m having some time. I decided to spend some time everyday dedicating to my blog. So first thing I need to do is setting up a wordpress blog with default template.</p>

<p>I started browsing to find a good theme for the wordpress blog before setting up anything. While browsing, I opened <strong><a href="http://www.paulirish.com">paulirish.com</a></strong> and saw that he&rsquo;d recently switched his blog to some new blogging software called Octopress.</p>

<!-- more -->


<p>I also read about Octopress from my daily reading list, but didn&rsquo;t give much attention to it. But I found Paul&rsquo;s blog very neat –– The default theme of Octopress is awesome –– and it&rsquo;s responsive too. I started checking out all Octopress blogs, and how to configure it. Finally I decided to use Octopress for my blog.</p>

<h3>Why Octopress and not Wordpress ?</h3>

<p>Octopress is simple and comes up with a neat, elegant ( and responsive ) theme. Obviously Wordpress is really the most powerful and most widely used blogging software, and it has lot of extentions and plugins available. But for me , for writing some tech tips , don&rsquo;t need all those stuff. Using Octopress , I can use familiar git commands , write everything in markdown and finally can deploy to github pages.</p>

<p>Another thing I liked is, all my blog content will be residing in my system itself in the form of markdown files. I can generate my static blog site anytime I need and deploy to number of hosting services. The advantage of a static website over a dynamic platform like Wordpress is : It&rsquo;s loading time will be faster. Because everytime I access a blog post in Wordpress, it need to fetch from the database. But Octopress blog will have only static html pages –– so it will be loaded faster.</p>

<h3>How to set up an Octopress blog ?</h3>

<p>This had been covered in many articles. Just google around , you can find a lot. I followed these simple instructions given in the Octopress website. Link is given below</p>

<p><a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a></p>

<p>There&rsquo;re couple of good themes built for Octopress ( It&rsquo;s all 3rd party ). Since I like the default Octopress theme, I didn&rsquo;t try any 3rd party themes. But It&rsquo;s worth checking out those.</p>

<p>PS: I&rsquo;ll be writing mainly about Javascript , HTML ,CSS and client side framework and design patterns here. Expect more posts from me soon in this space.</p>
]]></content>
  </entry>
  
</feed>
