<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AngularJS | UNDEFINED NULL]]></title>
  <link href="http://www.undefinednull.com/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://www.undefinednull.com/"/>
  <updated>2014-03-04T12:53:35+05:30</updated>
  <id>http://www.undefinednull.com/</id>
  <author>
    <name><![CDATA[Shidhin C R]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS: Real time model persistence using local storage]]></title>
    <link href="http://www.undefinednull.com/2014/02/25/angularjs-real-time-model-persistence-using-local-storage/"/>
    <updated>2014-02-25T07:46:00+05:30</updated>
    <id>http://www.undefinednull.com/2014/02/25/angularjs-real-time-model-persistence-using-local-storage</id>
    <content type="html"><![CDATA[<p>Last week, I came across a situation while working on a simple AngularJS application. I&rsquo;d to sync the data between multiple open tabs. As you guess,  the easy way to sync data between multiple tabs is through <strong>local storage</strong>. Ofcourse there are better ways of doing this using <strong>websockets</strong>; but here I am going to explain the client-side way –– using local storage and real time updating other tabs.</p>

<!--more-->


<h2>The Code</h2>

<p>I created a demo app in Plunker. Code is given below</p>

<p><code>html index.html
&lt;!DOCTYPE html&gt;
&lt;html ng-app="app"&gt;
&lt;head&gt;
  &lt;script  src="http://code.angularjs.org/1.2.13/angular.js"&gt;&lt;/script&gt;
  &lt;link rel="stylesheet" href="style.css" /&gt;
  &lt;script src="script.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body ng-controller="MaintCtrl as m"&gt;
  &lt;h1&gt;&lt;/h1&gt;
  &lt;h2&gt;Current LocalStorage value is = &lt;em&gt;&lt;/em&gt;&lt;/h2&gt;
  &lt;input type="text" ng-model="m.value"&gt;
  &lt;input type="button" value="update" ng-click="m.update(m.value)"&gt;
&lt;/body&gt;
&lt;/html&gt;
</code>
And the JavaScript :</p>

<p>```javascript script.js
var app;
app = angular.module(&ldquo;app&rdquo;, []);
app.controller(&ldquo;MaintCtrl&rdquo;, function(LS) {
  this.greeting = &ldquo;This is a localstorage demo app&rdquo;;
  this.value = LS.getData();
  this.latestData = function() {</p>

<pre><code>return LS.getData();
</code></pre>

<p>  };
  this.update = function(val) {</p>

<pre><code>return LS.setData(val);
</code></pre>

<p>  };
});
app.factory(&ldquo;LS&rdquo;, function($window, $rootScope) {
  return {</p>

<pre><code>setData: function(val) {
  $window.localStorage &amp;&amp; $window.localStorage.setItem('my-storage', val);
  return this;
},
getData: function() {
  return $window.localStorage &amp;&amp; $window.localStorage.getItem('my-storage');
}
</code></pre>

<p>  };
});
```</p>

<p>The above shows a simple application that stores data in local storage. This works well when there&rsquo;s only one tab. Our challenge is to ensure the view is same when the application is opened in multiple tabs as well.</p>

<h2>The Technique</h2>

<p>Local storage provides an <code>event</code> called <code>storage</code> on window object. Whenever the localstorage gets updated, all the event listeners attached to <code>storage</code> gets invoked. The first parameter to the handler function is an event object which contains  an <code>event.key</code> pointing to the local storage value changed.</p>

<p>```javascript
angular.element($window).on(&lsquo;storage&rsquo;, function(event) {</p>

<pre><code>if (event.key === 'my-storage') {
  $rootScope.$apply();
}
</code></pre>

<p>  });
```</p>

<p><strong>$rootScope.$apply()</strong>, will trigger a digest cycle from root scope, and all the views will be updated with the new model value.</p>

<p>Final JavaScript :</p>

<p>```javascript
var app;
app = angular.module(&ldquo;app&rdquo;, []);
app.controller(&ldquo;MaintCtrl&rdquo;, function(LS) {
  this.greeting = &ldquo;This is a localstorage demo app&rdquo;;
  this.value = LS.getData();
  this.latestData = function() {</p>

<pre><code>return LS.getData();
</code></pre>

<p>  };
  this.update = function(val) {</p>

<pre><code>return LS.setData(val);
</code></pre>

<p>  };
});
app.factory(&ldquo;LS&rdquo;, function($window, $rootScope) {
  angular.element($window).on(&lsquo;storage&rsquo;, function(event) {</p>

<pre><code>if (event.key === 'my-storage') {
  $rootScope.$apply();
}
</code></pre>

<p>  });
  return {</p>

<pre><code>setData: function(val) {
  $window.localStorage &amp;&amp; $window.localStorage.setItem('my-storage', val);
  return this;
},
getData: function() {
  return $window.localStorage &amp;&amp; $window.localStorage.getItem('my-storage');
}
</code></pre>

<p>  };
});
```</p>

<h2>Demo</h2>

<p>Try opening the following link in multiple  tabs. Update the input text from different tabs, and you can see them updating the other tabs as well.</p>

<p><a href="http://embed.plnkr.co/ThpFwX7BRhRhNWPuq5ap/preview" target="_blank">Angular LocalStorage Demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['Resolve' in AngularJS routes, explained as story]]></title>
    <link href="http://www.undefinednull.com/2014/02/17/resolve-in-angularjs-routes-explained-as-story/"/>
    <updated>2014-02-17T11:09:00+05:30</updated>
    <id>http://www.undefinednull.com/2014/02/17/resolve-in-angularjs-routes-explained-as-story</id>
    <content type="html"><![CDATA[<p>I feel AngularJS documentation is baffling sometimes. Reason may be,  I&rsquo;m going through the same <a href="http://www.bennadel.com/blog/2439-My-Experience-With-AngularJS-The-Super-heroic-JavaScript-MVW-Framework.htm">learning curve</a> described by <a href="https://twitter.com/bennadel">@bennadel</a>. Through this article, I&rsquo;m primarily aiming to help those who got stuck at some point of the curve. Don&rsquo;t take it too seriously; I&rsquo;m just sharing some of my experiences with AngularJS.</p>

<!--more-->


<p>Recently, I was learning how routes work in AngularJS, and how they talk to the controller ..etc. Then I observed the controller initialisation can differ based on the route configurations and events like <code>$routeChangeSuccess</code> and <code>$routeChangeError</code> are fired accordingly. Most of these are achieved by a <code>resolve</code> attribute of  the route configuration object. Here, I&rsquo;ll explain it through 3 versions of a story.</p>

<h2>The Story</h2>

<p>On one day, I was planning for a trip to a Switzerland. So I called the tour coordinator who makes the arrangements to this place. He explained the itinerary and hotel details clearly, so I asked him to make the necessary arrangements. After that, it&rsquo;s the tour coordinator&rsquo;s responsibility to book the room and make other required set-ups for my trip. Finally, I did a trip to Switzerland.</p>

<p>Let&rsquo;s convert this to AngularJS context.  Now we have:</p>

<ul>
<li><code>visitplace</code> is our first route.</li>
<li>The place, it&rsquo;s surroundings and the hotel room are the contents of our template. Let&rsquo;s add it to <code>placetovisit.html</code>.</li>
<li>Tour coordinator is the one who connects to the place, so we have a controller called <code>TourCoordinatorCtrl</code>.</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Application (app.js)</span> <a href='/downloads/code/angular_resolve/app.js'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span> <span class="s2">&quot;app&quot;</span><span class="p">,</span> <span class="p">[</span> <span class="p">]</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">$routeProvider</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$routeProvider</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span> <span class="s2">&quot;/visitplace&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;placetovisit.html&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="s2">&quot;TourCoordinatorCtrl&quot;</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span> <span class="s2">&quot;accommodation&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">hotelName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;Some Hotel&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">roomNo</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;203&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span> <span class="s2">&quot;TourCoordinatorCtrl&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">$scope</span><span class="p">,</span> <span class="nx">accommodation</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Shidhin&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">place</span> <span class="o">=</span> <span class="s2">&quot;Switzerland&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">hotel</span> <span class="o">=</span> <span class="nx">accommodation</span><span class="p">.</span><span class="nx">hotelName</span><span class="p">(</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">roomno</span> <span class="o">=</span> <span class="nx">accommodation</span><span class="p">.</span><span class="nx">roomNo</span><span class="p">(</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And the templates <code>placetovisit.html</code> and <code>index.html</code> :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Template (placetovisit.html)</span> <a href='/downloads/code/angular_resolve/placetovisit.html'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>Trip details<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>	<span class="nt">&lt;h2&gt;</span>Hi, {{name}}. Welcome to {{place}}<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>	<span class="nt">&lt;div&gt;</span>The accomodation is arranged on <span class="nt">&lt;strong&gt;</span>{{hotel}}<span class="nt">&lt;/strong&gt;</span> and room number is <span class="nt">&lt;strong&gt;</span>{{roomno}}<span class="nt">&lt;/strong&gt;&lt;/div&gt;</span>	
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>```html Index.html
&lt;!doctype html>
<html lang="en" ng-app="app">
<head></p>

<pre><code>&lt;meta charset="UTF-8"&gt;
&lt;title&gt;AngularJS Resolve routes example&lt;/title&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;a href="#/visitplace"&gt;I want to go for a trip&lt;/a&gt;
&lt;div ng-view&gt;&lt;/div&gt;
</code></pre>

<script src="https://ajax.googleapis.com/ajax/libs/AngularJS/1.0.1/angular.min.js"></script>


<script src="app.js"></script>


<p></body>
</html>
<code>``
Everything works as expected when we navigate to the route</code>/visitplace<code>. If you notice, the tour controller has a dependency on</code>accommodation` service. But it&rsquo;s just the controller&rsquo;s responsibility to find the hotel and room details. Also, getting the hotel and room details are completely synchronous events. That means, the room will be arranged before I reach the place.</p>

<p>But what if they&rsquo;re asynchronous events? Let&rsquo;s think this way: What If the tour coordinator is not so professional and he forgot to book the hotel and room. Because of this, when I arrive at the place, I&rsquo;d to wait till I get a new room. Similarly, in the code, we can see that the view is rendered, but the <code>getHotel()</code> and <code>getRoom()</code> methods taking extra time to get the room details.</p>

<p>```javascript
&ldquo;use strict&rdquo;;
var app = angular.module( &ldquo;app&rdquo;, [ ] );
app.config( function( $routeProvider ) {
  $routeProvider.when( &ldquo;/visitplace&rdquo;, {</p>

<pre><code>templateUrl: "placetovisit.html",
controller: "TourCoordinatorCtrl"
</code></pre>

<p>  } );
} );
app.factory( &ldquo;accommodation&rdquo;, function( $timeout ) {
  return {</p>

<pre><code>hotelName: function( scope ) {
  $timeout(function(){
    scope.hotel = "Some hotel";
  },3000);
  return "---";
},
roomNo: function( scope ) {
  $timeout(function(){
    scope.roomno = "103";
  },3000);
  return "---";
}
</code></pre>

<p>  };
} );
app.controller( &ldquo;TourCoordinatorCtrl&rdquo;, function( $scope, accommodation ) {
  $scope.name = &ldquo;Shidhin&rdquo;;
  $scope.place = &ldquo;Switzerland&rdquo;;
  $scope.hotel = accommodation.hotelName( $scope );
  $scope.roomno = accommodation.roomNo( $scope );
} );
```
This is not ideal in sometimes. I&rsquo;ve to render the view and wait for some of the data to be loaded. In my case, it&rsquo;s like I already started the trip and reached the place; but I&rsquo;m waiting in the place to get my accommodation. This is really annoying ! Is there any way to make sure that these dependencies are resolved before I start my journey ? Let&rsquo;s see :</p>

<h2>Version 2 of the Story</h2>

<p>This time, I&rsquo;ve a friend who is a hotel owner in Switzerland. He is a close friend of mine, so I can ask him for a room at any time. If I do this, I don&rsquo;t need to depend upon the accommodation provided by tour coordinator. Finally, all I have to do is, to make sure that I myself resolve the accommodation problem and tell the tour coordinator to arrange the rest.</p>

<p>This is exactly what we need if the route itself needs to resolve some dependencies in our application. For this, Angular provides a configuration on the <code>$routeProvider</code> service, called as <code>resolve</code>.  The resolve property is an optional map object / [ array of existing service names ]. All the keys of the map object can be injected to the controller as a dependency. The key would be a simple string, and it&rsquo;s value can be either a function or string. If string is provided, Angular will assume that it&rsquo;s an existing service and inject that particular service to the controller. If the value is a function, it will act as a factory function and the return value will be injected to the controller.</p>

<p>Let&rsquo;s relate our current story to Angular&rsquo;s context by using this resolve object. Look at our modified application code:</p>

<p>```javascript
&ldquo;use strict&rdquo;;
var app = angular.module( &ldquo;app&rdquo;, [ ] , function( $routeProvider ) {
  $routeProvider.when( &ldquo;/visitplace&rdquo;, {</p>

<pre><code>templateUrl: "placetovisit.html",
controller: "TourCoordinatorCtrl",
resolve: {
  "myFriendsHotel": function( ) {
    return {
      hotelName: function( ) {
        return "My Friend's hotel";
      },
      roomNo: function( ) {
        return "100";
      }
    };
  }
}
</code></pre>

<p>  });
} );
app.controller( &ldquo;TourCoordinatorCtrl&rdquo;, function( $scope, myFriendsHotel ) {
  $scope.name = &ldquo;Shidhin&rdquo;;
  $scope.place = &ldquo;Switzerland&rdquo;;
  $scope.hotel = myFriendsHotel.hotelName( );
  $scope.roomno = myFriendsHotel.roomNo( );
} );
```
<em>Note: When controller is defined in the route, never initialise it again through ng-controller. That might throw an error when used with resolve configuration.</em></p>

<p>By doing this way, we can make sure that the controller initialisation is delayed till the hotel is ready. The view will be rendered only when the controller is initialised and a <code>$routeChangeSuccess</code> event will be fired. Also notice that, finding a hotel is a synchronous action; it means, since my friend is a hotel owner, I got a room immediately. In real world applications, most of the times we&rsquo;re going to deal with asynchronous actions. Let&rsquo;s move to the 3rd version of the story to sort that out.</p>

<h2>Final version of the Story</h2>

<p>Last time we saw that I&rsquo;d a friend who was a hotel owner. But in this version of the story, there is no hotel owner. This time, I&rsquo;ve another friend in Switzerland who knows some of the hotel owners and he can find me a better room for cheaper cost. Once I call him and tell that my requirements, he&rsquo;ll take some time to talk to his friends and arrange me a room. The time cannot be predictable; because my friend will ask his friends, and his friends may talk to their friends, and it can go on like this. But when I called him first, he gave me back a promise that he will surely update the status –– so that I can set up the rest. So, only when I get an update from him, I am going to call up the tour coordinator and ask him to set up the rest of arrangements.</p>

<p>Let&rsquo;s see the final version of our code  in Angular:</p>

<p>```javascript
&ldquo;use strict&rdquo;;
var app = angular.module( &ldquo;app&rdquo;, [ ] , function( $routeProvider ) {
  $routeProvider.when( &ldquo;/visitplace&rdquo;, {</p>

<pre><code>templateUrl: "placetovisit.html",
controller: "TourCoordinatorCtrl",
resolve: {
  "accommodation": function( $q, $timeout ) {
    var myFriend = $q.defer();        
    $timeout(function(){
      myFriend.resolve({
        hotelName: function( ) {
          return "My Friend's friend's hotel";
        },
        roomNo: function( ) {
          return "404";
        }
      });
    },5000);
    return myFriend.promise;
  }
}
</code></pre>

<p>  });
} );
app.controller( &ldquo;TourCoordinatorCtrl&rdquo;, function( $scope, accommodation ) {
  $scope.name = &ldquo;Shidhin&rdquo;;
  $scope.place = &ldquo;Switzerland&rdquo;;
  $scope.hotel = accommodation.hotelName( );
  $scope.roomno = accommodation.roomNo( );
} );
<code>``
Closely look at each lines and see the differences from the previous one. Did you notice that, this time we've defined a variable</code>myFriend<code>inside the resolve function and initialised it using</code>$q.defer()`. The <strong>$q</strong> is the implementation of <em>Promises</em> API in AngularJS. It&rsquo;s inspired by the &ldquo;<strong>Q</strong>&rdquo; library implementation by kriskowal ( <a href="https://github.com/kriskowal/q">link</a> here ). If you don&rsquo;t know what a <em>Promise</em> is, then you should definitely check it out <a href="http://12devs.co.uk/articles/promises-an-alternative-way-to-approach-asynchronous-javascript/">here</a>.</p>

<p>What happens here is : Our resolve function has created the variable <code>myFriend</code> and it immediately returned the <code>myFriend.promise</code>. This means, we know that something is going to happen later and <code>myFriend</code> will update the result of that action to the promise returned. The action can be either successful or a failure. For a successful action, the promise will be resolved with the hotel room data; and for the failure action, the promise will be rejected with data ( mostly the error message ).</p>

<p>When the factory function returns a promise, the controller initialisation will wait till the promise gets resolved/rejected. Once the promise is resolved, the controller will be initialised and the resolved data will be injected to the controller. In our case, it&rsquo;s the <code>accommodation</code> object; after this, a <code>$routeChangeSuccess</code> event will be fired. There&rsquo;re also chances that, the first promise can return another promise. In that case, our controller initialisation will be delayed till all the promises are resolved. At any point, if any of the promises are rejected, the controller will not be initialised; instead a <code>$routeChangeError</code> event will be fired.</p>

<p>The <code>resolve</code> is very useful if we need to load some data upfront before the controller initialisation and rendering the view. In real world applications, the <code>$timeout</code> can be replaced with a <code>$http</code> object to load data from server. Since it&rsquo;s an asynchronous event, we can always make sure that our view will be rendered with proper data.</p>

<h2>That&rsquo;s the End of All Stories</h2>

<p>I tried to make these as clear I can. Hope everybody understood the concept of resolve in AngularJS routes. Feel free to comment for any improvements/ suggestions. Thanks for reading !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastering the scope of the directives in AngularJS]]></title>
    <link href="http://www.undefinednull.com/2014/02/11/mastering-the-scope-of-a-directive-in-angularjs/"/>
    <updated>2014-02-11T08:26:00+05:30</updated>
    <id>http://www.undefinednull.com/2014/02/11/mastering-the-scope-of-a-directive-in-angularjs</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-XOGfvAHr7HQ/UvoUItkZMZI/AAAAAAAAHJk/IJz5JcUB9dw/w520-h274-no/scopes_in_directives.png" alt="" /></p>

<h2>What are Directives</h2>

<p>Directives are one of the most powerful features of AngularJs. You can imagine them as the building blocks ( aka re-usable components ) of any AngularJs application. Mastering the entire directives, is strictly out of topic for this article. For that purpose, I would really recommend this <a href="http://www.packtpub.com/angularjs-directives/book">book</a> as it has covered the nuts and bolts of them. And here, we&rsquo;ll discussing a small part of the directives called : &ldquo;<strong>Directive scope</strong>&rdquo;.</p>

<!--more-->


<h2>Scopes in AngularJS</h2>

<p>Unlike the other MVC frameworks, AngularJs doesn&rsquo;t have any <code>model</code> classes or functions to create <code>model</code> objects. Instead, AngularJs extended the plain JavaScript object with custom methods and properties. This special object, also known as the <code>scope</code> in AngularJs terms; It works as a glue between the view and other parts ( directives, controllers and services ) of the AngularJs application.</p>

<p>Whenever the AngularJs application is bootstrapped, a <code>rootScope</code> object is created. All the scopes created by controllers,directives,services are always inherited from this <code>rootScope</code>. This pattern is applicable to any nested controllers, directives added inside any controllers..etc. The point you need to remember is, <code>scopes</code> will be nested inside the AngularJs application and it&rsquo;ll always start from the <code>rootScope</code>. Before going to the next section, get a good grasp on how <code>scope</code> works. See this link :  <a href="https://github.com/angular/angular.js/wiki/Understanding-Scopes">Scopes in AngularJS</a>.</p>

<h2>Scope inside a directive</h2>

<p><em><strong>Note</strong>: This section assumes you&rsquo;ve prior knowledge of creating  a simple directive</em></p>

<p>All directives always have a scope associated with it. This scope object can be accessed inside the directive&rsquo;s link function. Same way, all the methods and properties of the scope will be available inside the directive&rsquo;s template also.
By default, a directive will not have it&rsquo;s own scope. So the directive will share the the same scope of it&rsquo;s parent ( Controller scope ) where it&rsquo;s been used. But there&rsquo;s always we can force the directive to create a new scope by changing it&rsquo;s directive definition object. A <code>directive definition object</code> ( let&rsquo;s call it as  <em>DDO</em> ) is used to configure a directive when it&rsquo;s defined –– to know more about it check AngularJs docs about directives <a href="http://docs.angularjs.org/guide/directive">link</a>. The <em>DDO</em> has a  property called <code>scope</code> and this is used for setting the scope of the directive. Let&rsquo;s see the example below:</p>

<p>```javascript</p>

<pre><code>var app = angular.module("test",[]);
app.directive("myDirective",function(){
    return {
        restrict: "EA",
        scope: true,
        link: function(scope,elem,attr){
            // code goes here ...           }       }        });
</code></pre>

<p><code>``
Setting a "false" value to the</code>scope` property in <em>DDO</em> is same as having <strong>no</strong> own scope for the directive. At this time, directive will share the parent scope. The other values to the scope property are &ldquo;true&rdquo; and &ldquo;{ }&rdquo;. In the next section, we&rsquo;ll see how these values affect the directive&rsquo;s behaviour.</p>

<h2>Different types of directive scopes</h2>

<p><u><strong>Scope :</u>  False</strong>  (  Parent scope  will be shared to directive )</p>

<p>Let&rsquo;s try another example. We&rsquo;re creating a simple directive that will render a div and a textbox to show and change a name. The <code>name</code> property get&rsquo;s the initial value from the <code>Ctrl1</code> scope ( the parent scope of the directive ).</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/shidhincr/eyNYw/4/embedded/js,resources,html,css,result/light/"></iframe></p>

<p>Try changing the name inside the textbox; we can see that the name inside the header also got changed. Since there&rsquo;s no scope provided in the <em>DDO</em>, the directive gets it&rsquo;s parent scope shared to it. Hence any changes we make inside the directive is actually reflecting in the parent scope. The parent <code>Ctrl1</code> has  a method to reverse the name; this method gets triggered when you click on the header. Now if you observe, by clicking on the header will reverse the name inside the directive also.</p>

<p><u> <strong>Scope :</u> True</strong>  ( New child scope will be created for the directive )</p>

<p>It&rsquo;s time for the directive to get some own scope. By setting &ldquo;true&rdquo; to the scope property, AngularJs will create a new scope object and set to the directive. This new scope created, will be prototypically inherited from it&rsquo;s parent scope. So instead of sharing the actual parent scope to directive, it&rsquo;s going to get a scope object inherited from the parent scope.</p>

<p>The exact difference between setting <code>scope: true</code> and <code>scope: false</code> is like this:</p>

<ul>
<li>When scope is set to &ldquo;<strong>true</strong>&rdquo;, there&rsquo;s explicitly a new scope object created for the directive. Any changes made inside the directive will affect the child scope and not the parent scope. Since the child scope is inherited from the parent scope, any changes made in the <code>Ctrl1</code> ( the parent scope ) will affect the child scope also.</li>
<li>When scope is set to &ldquo;<strong>false</strong>&rdquo;, the <code>Ctrl1</code> and directive are sharing the same scope. This means any changes happening in the controller or directive will reflect in both places.</li>
</ul>


<p>Let&rsquo;s look at the following fiddle to make it more clear :</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/shidhincr/q3kex/3/embedded/js,resources,html,css,result/light/"></iframe></p>

<p>First, try clicking on the header. We can see that the name got reversed inside both <code>Ctrl1</code> and  directive. Secondly,  change the name inside the textbox; we can see that parent <code>scope</code> is not at all getting affected.</p>

<p><em><strong>Note:</strong> If we click on the header again, we can notice that it&rsquo;ll not reflect inside the directive <code>scope</code>. But we saw this working when the first time we clicked the header. I guess this is because the <code>ng-model</code> will only create a new name property once the textbox value is changed; Till then the name property inside directive was referring to it&rsquo;s parent <code>scope</code> ( through prototype chain )</em></p>

<p><u> <strong>Scope :</u>  { }</strong> ( Complete isolated scope will be created for the directive )</p>

<p>Now we&rsquo;ve reached the most interesting part of our article. As of now, we&rsquo;ve seen two situations where a directive scope got created. In the third type, we are going to set scope property in the <em>DDO</em>  to an <strong>Object literal</strong>. When an object literal is passed to the scope property, things are bit different. At this time, there will be a new scope created for the directive, but <strong>will not be inherited from the parent scope</strong>. That means, the directive is going to get a complete <em>Isolated scope</em>. By an isolated scope means, any changes from the parent scope is going to alter the directive scope and vice versa.</p>

<p>Let&rsquo;s re-write our original directive example like this :</p>

<p>```javascript</p>

<pre><code>var app = angular.module("test",[]);
app.directive("myDirective",function(){
    return {
        restrict: "EA",
        scope: {},
        link: function(scope,elem,attr){
            // code goes here ...           }       }        });
</code></pre>

<p>```</p>

<p>By far, this is the most recommended way of setting the <code>scope</code> on <em>DDO</em> while creating custom directives. Why because:</p>

<ul>
<li>It&rsquo;ll make sure that  directive is so generic and can be placed anywhere inside the application. Parent scope is not going to interfere with the directive scope anyways.</li>
</ul>


<p>Though it&rsquo;s been called as an <em>Isolated scope</em>, AngularJs allows to communicate with the parent scope using some special symbols knows as <code>*prefixes*</code>. You might wonder why ? and the answer is : there&rsquo;re many situations we need to get the data from parent scope, execute callbacks in the parent scope when changes inside directive happens ..etc. The next section is entirely dedicated for explaining the <em>Isolated scope</em> and it&rsquo;s properties.</p>

<h2>Isolated Scope Explained</h2>

<p>See the below fiddle:</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/shidhincr/q3kex/4/embedded/js,resources,html,css,result/light/"></iframe></p>

<p>We have invoked the directive by passing an empty object to the <em>DDO</em>. Now we can see that, even though the parent scope has a name = &ldquo;Harry&rdquo; , the textbox inside the directive is blank. This is because of the new <em>Isolated scope</em> who doesn&rsquo;t know anything about it&rsquo;s parent scope.</p>

<p><strong>But, what if we want to pass some values from the parent <code>scope</code> to the directives ?</strong></p>

<p>That&rsquo;s absolutely a very good question. Not only just passing some values from the parent, but there can be situations like, changes inside the directives should invoke some callback functions in parent scope; and sometimes, we need two-way binding between parent &amp; directives scope ..etc</p>

<p>For this purposes, AngularJs will allow properties to be added to the <strong>Object literal</strong> passed to the <em>DDO</em>. These  properties <strong>MUST</strong> be set as an attributes of the directive element ( which we are going to place in our HTML ). Don&rsquo;t worry if I&rsquo;m so creating so much confusion over here, let me explain with an example:</p>

<p>Just go through the below fiddle, and look at the &ldquo;HTML&rdquo;, &ldquo;JavaScript&rdquo; and  &ldquo;Results&rdquo; tabs.</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/shidhincr/pJLT8/10/embedded/js,resources,html,css,result/light/"></iframe></p>

<p>Now let&rsquo;s try to understand how this works. Take the JavaScript code first:</p>

<p>```javascript
 var app = angular.module(&ldquo;app&rdquo;, []);
 app.controller(&ldquo;MainCtrl&rdquo;, function( $scope ){</p>

<pre><code>$scope.name = "Harry";
$scope.color = "#333333";
$scope.reverseName = function(){
 $scope.name = $scope.name.split("").reverse().join("");
};
$scope.randomColor = function(){
    $scope.color = '#'+Math.floor(Math.random()*16777215).toString(16);
};
</code></pre>

<p>});
app.directive(&ldquo;myDirective&rdquo;, function(){</p>

<pre><code>return {
    restrict: "EA",
    scope: {
        name: "@",
        color: "=",
        reverse: "&amp;"
    },
    template: [
        "&lt;div class='line'&gt;",
        "Name : &lt;strong&gt;&lt;/strong&gt;;  Change name:&lt;input type='text' ng-model='name' /&gt;&lt;br/&gt;",
        "&lt;/div&gt;&lt;div class='line'&gt;",
        "Color : &lt;strong style='color:'&gt;&lt;/strong&gt;;  Change color:&lt;input type='text' ng-model='color' /&gt;&lt;br/&gt;&lt;/div&gt;",
        "&lt;br/&gt;&lt;input type='button' ng-click='reverse()' value='Reverse Name'/&gt;"
    ].join("")    
};
</code></pre>

<p>});
```</p>

<p>You can clearly see that, there&rsquo;s this controller <code>MainCtrl</code> which creates the parent scope. Parent scope has the following properties and methods.</p>

<pre><code>name = "Harry"
color =  "#333333"
reverseName = function for reversing the name
randomColor = function for generating random color code
</code></pre>

<p>Similarly we&rsquo;ve created our directive in <em>Isolated scope</em> by setting an object literal in the <em>DDO</em>. What looks interesting is that our scope object contains some properties :</p>

<pre><code>scope: {
        name: "@",
        color: "=",
        reverse: "&amp;"
    }
</code></pre>

<p>Let&rsquo;s check the directive template. We can see that these properties are referenced there. This means, these properties are finally going to be used inside our directives template or the directive link function. Their behaviour depends on the values –– also known as  <strong><em>Prefixes</em></strong>  –– provided. These  <strong><em>Prefixes</em></strong> are basically used to bind the parent scope&rsquo;s methods and properties to the directive scope.</p>

<p>There&rsquo;re 3 types of prefixes AngularJS provides.</p>

<pre><code>1. "@"   (  Text binding / one-way binding )
2. "="   ( Direct model binding / two-way binding )
3. "&amp;"   ( Behaviour binding / Method binding  )
</code></pre>

<p>All these prefixes takes the data from the attributes of the directive element. Let&rsquo;s re-look at the HTML code:</p>

<p>```html
</p>

<div my-directive 
  class="directive"
  name="{{name}}" 
  reverse="reverseName()" 
  color="color" >
</div>


<p>
```</p>

<p>When the directive encounters a prefix in the scope object, it will try to map it with the corresponding attribute of the directive element.  It&rsquo;ll try to map the same attribute name if the prefix is not followed by extra name. For example:</p>

<p>```javascript
scope : {</p>

<pre><code>name: "@"}
</code></pre>

<p>```
The above will be mapped to an attribute &ldquo;name&rdquo; in the directive. Now let&rsquo;s see what happens if we change the syntax like below:</p>

<p>```javascript
scope : {</p>

<pre><code>name: "@parentName"}
</code></pre>

<p>```
At this time, the name property will be looking for an attribute &ldquo;parentName&rdquo; for getting it&rsquo;s value. This means, any string after the  <strong><em>Prefixes</em></strong> should be matching with the attribute name. I think these parts clear for you now. Let&rsquo;s gets back to the actual difference between each  <strong><em>Prefixes</em></strong>.</p>

<p><em><strong>Note</strong> : If you&rsquo;re confused in any of the sentences below, have a look at the demo code ( HTML,JS ) and come back</em></p>

<ul>
<li><p>The &ldquo;@&rdquo; prefix is a one-way binding between the directive scope and parent scope. &ldquo;@&rdquo; prefix always expect it&rsquo;s mapped attribute way to be an expression. This is very important; because to make the &ldquo;@&rdquo; prefix work, we need to wrap the attribute value inside <code>{{}}</code>. Since &ldquo;@&rdquo; is creating a one-way binding between the parent and directive scope, any changes made in the parent scope will reflect inside the directive scope; but not vice versa. &ldquo;@&rdquo; prefix is highly useful when our directive needs to be initialised with some data from it&rsquo;s parent scope.</p>

<p>  To understand how it works in our demo, try clicking on the &ldquo;Reverse name&rdquo; button in the parent scope. You can see that both names inside parent and directive scopes got reversed. Now let&rsquo;s change the name from the  textbox inside the directive; you can see that the changes will be applicable only to the directive scope.</p></li>
<li><p>Now comes the second &ldquo;=&rdquo; prefix. As it looks like, it creates a two-way binding between the parent and directive scope. The important point about &ldquo;=&rdquo; prefix is that, it&rsquo;ll always expect the attribute value to be the model name. That means, you cannot provide an expression as the value of attribute mapped to &ldquo;=&rdquo; prefix. This is useful, when any of our directive scope property to be same as the parent scope property.</p>

<p>  In the demo, try clicking on the &ldquo;Randomize color&rdquo; button and observe the changes inside the parent and directive scopes. Similarly, try changing the color textbox and you can see that the parent scope color also got changed.</p></li>
<li><p>Alas, we&rsquo;ve finally reached the last prefix. The &ldquo;&amp;&rdquo; prefix is also known as a method binding. This is used to bind any methods from the parent scope to the directive scope. This prefix is particularly useful when our directive needs to execute any  callbacks in the parent scope. Look at the code to see how attribute value for the &ldquo;&amp;&rdquo; prefix to be set.</p>

<p>  In the demo, parent scope has a method called &ldquo;reveseName&rdquo;. Through our &ldquo;&amp;&rdquo; prefix, we bound the &ldquo;reverseName&rdquo; method to a scope property named &ldquo;reverse&rdquo;. So whenever the &ldquo;reverse()&rdquo; method is executed inside the directive, it&rsquo;ll basically invoking the &ldquo;reverseName&rdquo; in the parent scope. Click on the &ldquo;Reverse name&rdquo; inside directive to see it in action.</p></li>
</ul>


<p>I know that AngularJs have made these things little bit difficult to understand. Especially because of these random naming conventions they&rsquo;ve chosen. I believe I&rsquo;ve tried my best to explain how the <em>Isolated scope</em>  works inside a directive. If you think you&rsquo;re still confused, I would recommend to have a look at the below article:</p>

<p><a href="http://umur.io/angularjs-directives-using-isolated-scope-with-attributes/">AngularJS directives: Isolated scope prefixes </a> . This one explains the <em>Isolated scope</em>  and it&rsquo;s properties clearly. It would definitely help to get away from any sort of confusions.</p>

<p>That&rsquo;s it !  I really didn&rsquo;t think that this post is going to be this much longer. But I couldn&rsquo;t help with that because, I didn&rsquo;t want to miss any points when I complete this. I hope everyone enjoyed reading this. I would&rsquo;ve made any errors / personal opinions; but I really want you guys to correct me when I am wrong –– comment box is made just for that. Thanks everyone !!</p>

<p><u><strong>Further Read :</strong></u></p>

<ol>
<li><a href="https://github.com/angular/angular.js/wiki/Understanding-Scopes">https://github.com/angular/angular.js/wiki/Understanding-Scopes</a></li>
<li><a href="http://amitgharat.wordpress.com/2013/06/08/the-hitchhikers-guide-to-the-directive/">http://amitgharat.wordpress.com/2013/06/08/the-hitchhikers-guide-to-the-directive/</a></li>
<li><a href="http://www.ng-newsletter.com/posts/directives.html">http://www.ng-newsletter.com/posts/directives.html</a></li>
<li><a href="https://egghead.io/lessons/angularjs-understanding-isolate-scope">https://egghead.io/lessons/angularjs-understanding-isolate-scope</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
