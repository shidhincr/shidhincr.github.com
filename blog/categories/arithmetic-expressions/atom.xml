<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: arithmetic expressions | S H I D H I N . C . R]]></title>
  <link href="http://shidhincr.com/blog/categories/arithmetic-expressions/atom.xml" rel="self"/>
  <link href="http://shidhincr.com/"/>
  <updated>2014-01-29T01:17:05+05:30</updated>
  <id>http://shidhincr.com/</id>
  <author>
    <name><![CDATA[Shidhin C R]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ Some Gotchas In Arithmetic Expression Evaluation : JavaScript]]></title>
    <link href="http://shidhincr.com/2013/09/26/some-gotchas-in-arithmetic-expression-evaluation-javascript/"/>
    <updated>2013-09-26T16:15:00+05:30</updated>
    <id>http://shidhincr.com/2013/09/26/some-gotchas-in-arithmetic-expression-evaluation-javascript</id>
    <content type="html"><![CDATA[<h2>Solve a small problem in JavaScript</h2>

<p>This post is just for recollecting some of the basics of JavaScript. Let&rsquo;s start with a small JavaScript code. Here is the code –– Solve it with out using the console.</p>

<p>```javascript</p>

<pre><code>var a = 5, b = 3;
a = ( a - ( b = ( a = a + b ) - b ) );
</code></pre>

<p>```</p>

<p>Take your own time to come up with an answer before moving to the next section.</p>

<!-- more -->


<h2>Analyzing the problem</h2>

<p>If your answer is <code>a = 3 and b = 5</code>, this post is written for you. Open your favorite browser and fire up the console. Put the above code in the console and see the values of <code>a</code> and <code>b</code> now.</p>

<p>Stunned ?  Yeah, The values of <code>a</code> and <code>b</code> are <code>a = 0  and b = 5</code> now. Honestly I also got it wrong initially. I did ask this question to some of my friends ( who are in JavaScript circle ),  and all of them gave me wrong answer.</p>

<h2>Some flashback</h2>

<p>So, here is how I arrived this to particular question. Last week I was trying to write the code for an interview problem in JavaScript  and it&rsquo;s a very common one –– How to swap values of 2 variables with out using a 3rd variable.</p>

<p>Let the variables be <code>a = 5</code> and <code>b = 3</code>. Swap the values of <code>a</code> and <code>b</code> with out using any 3rd variable .</p>

<p>Solution is simple . Just do the following arithmetic operations</p>

<pre><code>a = a + b
b = a - b
a = a - b
</code></pre>

<p>This will do the job.</p>

<p>What I was trying is to write the entire expression in one single line. I wrote it like below.</p>

<p><strong>Code 1 :</strong></p>

<p>```javascript CODE 1</p>

<pre><code>var a = 5, b = 3;
a = ( a - ( b = ( a = a + b ) - b ) );
</code></pre>

<p>```</p>

<p>Cool .. I thought it&rsquo;s done.</p>

<p>But I got surpriced when I tried it in the console. I was expecting final values should be <code>a = 3 and b = 5</code> but the output was different. I got <code>a = 0 and b =5</code>.</p>

<p>WTF ? Let me change the code a bit. I modified the code like this</p>

<p><strong>Code 2 :</strong></p>

<p>```javascript CODE 2</p>

<pre><code>var a = 5, b = 3;
a = ( ( b = ( a = a + b ) - b ) - a );
</code></pre>

<p><code>``
This time I got the correct results</code>a = -3 and b = 5`. So why the hell it didn&rsquo;t work for the first expression ?</p>

<h2>The answer is :</h2>

<p>We&rsquo;re evaluating it wrongly. I mean we are not doing the way JavaScript engine does. I went to the EcmaScript specification and read the section for &ldquo;Arithmetic Expression&rdquo;.</p>

<blockquote><p>Expressions : Any valid unit code that resolves to some value.</p></blockquote>

<p><strong>Two things to note :</strong></p>

<ul>
<li>Assignment operators are right to left associative. That means for the expression <code>a = b = 5</code>, the value <code>5</code> will be assigned to variable <code>b</code> and then assigned to variable <code>b</code>.</li>
<li>Arithmetic and multiplicative operators are left to right associative. For the expression <code>c = a + b</code>, the value of <code>a</code> will be computed first, then goes to <code>b</code> and computes it&rsquo;s value.</li>
</ul>


<p>For our problem, if I draw the parse tree roughly, it will be like below.</p>

<pre><code>   =
 /   \
a     -
    /   \
   a     =
       /   \
      b     -
          /   \
         =      b
       /   \
      a     +
          /   \
         a     b
</code></pre>

<p>Ideally parse tree doesn&rsquo;t contain the <code>=</code> operator. I made it like this to understand how the parser start evaluating the expression.</p>

<p>In the above parse tree, all the <code>=</code> operators are evaluated from right-to left ( that means the right node will be evaluated first and the value will be assigned to the left node ). On the other hand, arithmetic/multiplicative expressions are evaluated from left to right ( that means the values will be assigned from left and the arithmetic/multiplicative operation will be carried out ).</p>

<p>We can identify sub-expressions in our code. Basically, we can extract the expressions containing <code>=</code> to sub-expressions. Hence the above parse tree can be re-drawn like below.</p>

<pre><code>   =
 /   \
a     -
    /   \
   a     X
</code></pre>

<p>Where <code>X</code> is the <strong>Sub-Expression 1</strong> given below :</p>

<pre><code>         =
       /   \
      b     -
          /   \
         Y     b
</code></pre>

<p>Where <code>Y</code> is the <strong>Sub-Expression 2</strong> given below :</p>

<pre><code>         =
       /   \
      a     +
          /   \
         a     b
</code></pre>

<p>Let&rsquo;s see how JavaScript parser evaluate the value of <code>a</code> finally.</p>

<h3>Steps :</h3>

<ul>
<li><p>Parser takes the main expression <code>a = a - X</code> and evaluated from left to right. At first, parser finds the variable<code>a</code> and finds it&rsquo;s value. Now the parser moves to the next variable <code>X</code> and try to calculate it&rsquo;s value. Since <code>X</code> is an expression, it need to be evaluated to form a primitive value.</p>

<p>  <em>Note: To get the value, parser internally calls the <a href="http://es5.github.io/#x8.7.1">GetValue</a> of each operands</em></p>

<p>  So, for the parser, the expression becomes  like this :</p></li>
</ul>


<p><code>javascript Value Of "a"
a = GetValue( a ) - GetValue( Evaluate( X ) )
</code>
Which is :</p>

<p><code>javascript Value of "a"
a = 5 - GetValue( Evaluate( X )
</code></p>

<ul>
<li><p>Now it need to evaluate the expression <code>X</code> where <code>b = Y - b</code>. Here the first operand <code>Y</code> itself a sub-expression, so parser has to evaluate it first before calculating the value of the second operand <code>b</code>.</p></li>
<li><p>Let&rsquo;s evaluate the expression <code>Y</code> which is <code>a = a + b</code>. This is straightforward and contains no sub expression , hence evaluated like this.</p></li>
</ul>


<p>```javascript New value of &ldquo;a&rdquo; is</p>

<pre><code>a = GetValue( a ) + GetValue( b )
</code></pre>

<p>```
This equals to :</p>

<p>```javascript &ldquo;a&rdquo; became 8</p>

<pre><code>a = 5 + 3
</code></pre>

<p><code>``    
Finally the value of expression</code>Y<code>becomes</code>8`.</p>

<ul>
<li>Coming back to step 2 where expression <code>X</code> needs to be completed. expression <code>X</code> is</li>
</ul>


<p>```javascript Computing the value of &ldquo;b&rdquo;</p>

<pre><code>b = GetValue( Y ) - GetValue( b )
</code></pre>

<p>```</p>

<p>Becomes like this :</p>

<p>```javascript Value of &ldquo;b&rdquo;</p>

<pre><code>b = 8 - GetValue( b )
</code></pre>

<p>```</p>

<p>Which is :</p>

<p>```javascript Final value of &ldquo;b&rdquo;</p>

<pre><code>b = 8 - 3
</code></pre>

<p>```</p>

<p>Finally the value of <code>b</code> and expression <code>X</code> becomes <code>5</code>.</p>

<ul>
<li>So now all the sub expressions are evaluated , the main expression can be completed now.</li>
</ul>


<p>The main expression was :</p>

<p>```javascript Evaluating the main expression</p>

<pre><code>a = 5 - GetValue( X ) ; // value of X = 5 now
</code></pre>

<p>```</p>

<p>That means final value of <code>a = 5 - 5</code>  which is <code>0</code>.</p>

<ul>
<li>Finally the values of <code>a</code> and <code>b</code> will become <code>a = 0 and b = 5</code></li>
</ul>


<p>Now we&rsquo;re in the same direction with JS engine. We can apply what we learned for the <strong>Code 2</strong> also.</p>

<h2>Conclusion</h2>

<p>I didn&rsquo;t want to write this much long. All I wanted to recollect some of those basic stuff. Thanks for reading !!</p>

<p> References :</p>

<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators</a></li>
<li><a href="http://www.ecma-international.org/ecma-262/5.1/#sec-8.7">http://www.ecma-international.org/ecma-262/5.1/#sec-8.7</a></li>
<li><a href="http://es5.github.io/#x8.7.1">http://es5.github.io/#x8.7.1</a></li>
<li><a href="http://stackoverflow.com/questions/19045411/can-somebody-explain-how-javascript-arithmetic-expressions-work">http://stackoverflow.com/questions/19045411/can-somebody-explain-how-javascript-arithmetic-expressions-work</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
