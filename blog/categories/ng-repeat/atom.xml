<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ng-repeat | Undefined NULL]]></title>
  <link href="https://www.undefinednull.com/blog/categories/ng-repeat/atom.xml" rel="self"/>
  <link href="https://www.undefinednull.com/"/>
  <updated>2016-07-22T15:34:02+04:00</updated>
  <id>https://www.undefinednull.com/</id>
  <author>
    <name><![CDATA[Shidhin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Repeating Multiple Elements using ng-repeat-start and ng-repeat-end in AngularJS]]></title>
    <link href="https://www.undefinednull.com/2015/04/10/repeating-multiple-elements-using-ng-repeat-start-and-ng-repeat-end-in-angularjs/"/>
    <updated>2015-04-10T23:45:27+04:00</updated>
    <id>https://www.undefinednull.com/2015/04/10/repeating-multiple-elements-using-ng-repeat-start-and-ng-repeat-end-in-angularjs</id>
    <content type="html"><![CDATA[<p>When the AngularJS <a href="http://www.angularjs.org">website</a> is released, the TODO example in their website was one of the main attractions. The example was simple and just below 30 lines of code ( Here is the <a href="https://jsfiddle.net/1waxcf9x/">link</a>  if you want to check ). The whole trick behind the scene was done by a directive named <strong>ng-repeat</strong>, as shown below:</p>

<p><code>javascript
ng-repeat="todo in todoList.todos"
</code>
Till Angular 1.2, ng-repeat was designed to work on a single DOM element. In other words, ng-repeat can repeat only the DOM element on which it is added. Therefore, some of the situations &mdash; see below &mdash; lead Angular community to think about modifying ng-repeat in version 1.2. In the next section, we&rsquo;ll see the problem with ng-repeat and the solutions introduced.</p>

<!-- more -->


<h3>What was the issue ?</h3>

<p>Consider the model like this:
```javascript
$scope.data = [{</p>

<pre><code>name: 'Shidhin',
info: 'I am from Dubai'
</code></pre>

<p>}, {</p>

<pre><code>name: 'Someone',
info: 'I am from New york'
</code></pre>

<p>}]
<code>
And assume if we need an output like this:
</code>html</p>

<table>
    <tr>
        <td>Shidhin</td>
    </tr>
    <tr>
        <td>I am from Dubai</td>
    </tr>
    <tr>
        <td>Someone</td>
    </tr>
    <tr>
        <td>I am from New york</td>
    </tr>
</table>


<p>```</p>

<p>The fundamental problem here is, the <code>TR</code> tag cannot be grouped in another element other than <code>TABLE</code>. Since creating each <code>TABLE</code> for each <code>TR</code> is not feasible, it is difficult to create the above mark-up using ng-repeat.</p>

<h3>What changed in Angular 1.2</h3>

<p>From Angular version 1.2 onwards, ng-repeat got two siblings directives named <code>ng-repeat-start</code> and <code>ng-repeat-end</code>. With these, we can explicitly specify the starting and ending for ng-repeat. So, instead of using the ng-repeat directive on one single DOM element, we can specify the ng-repeat-start and ng-repeat-end on any two DOM elements.</p>

<p>These directives do the same job as ng-repeat &mdash; it uses the same expressions as ng-repeat  &mdash; but the main difference is, it <strong>repeats all DOM elements</strong> between the starting element and ending element (including the starting and ending tags).</p>

<p>Let&rsquo;s implement the above example with these new directives:</p>

<p>```html
</p>

<table>
    <tr ng-repeat-start="d in data">
        <td>{{d.name}}</td>
    </tr>
    <tr ng-repeat-end>
        <td>{{d.info}}</td>
    </tr>
</table>


<p>
```
The above code will generate the desired output. You can see a <a href="http://jsfiddle.net/shidhincr/3eLp5u6m/1/">DEMO</a> here</p>

<p><iframe style="width: 100%; height: 300px" frameborder="0" seamless="seamless" src="https://jsfiddle.net/shidhincr/3eLp5u6m/1/embedded/js,resources,html,css,result/light/"></iframe></p>

<h3>Summary</h3>

<p>Angular community had done a great job by introducing <strong>ng-repeat-start</strong> and <strong>ng-repeat-end</strong> directives. They&rsquo;re really powerful and solve some of the short-comings of the ng-repeat directive. I hope this article will help you for start using ng-repeat effectively in your next project. Thanks for reading!</p>
]]></content>
  </entry>
  
</feed>
