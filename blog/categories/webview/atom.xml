<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Webview | Undefined NULL]]></title>
  <link href="https://www.undefinednull.com/blog/categories/webview/atom.xml" rel="self"/>
  <link href="https://www.undefinednull.com/"/>
  <updated>2016-07-22T15:38:00+04:00</updated>
  <id>https://www.undefinednull.com/</id>
  <author>
    <name><![CDATA[Shidhin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Injecting Custom JavaScript into React Native's Webview]]></title>
    <link href="https://www.undefinednull.com/2015/12/27/injecting-custom-javascript-into-react-natives-webview/"/>
    <updated>2015-12-27T22:11:28+04:00</updated>
    <id>https://www.undefinednull.com/2015/12/27/injecting-custom-javascript-into-react-natives-webview</id>
    <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/-3JWl2Mvff3w/VoApfwiv1TI/AAAAAAAAssU/UJRZsSvHHpo/s800/Screen+Shot+2015-12-27+at+10.09.12+PM.png" title="Screen Shot 2015-12-27 at 10.09.12 PM.png" alt="react native webview" /></p>

<p>I was playing around with <a href="https://facebook.github.io/react-native/">React native</a> these days. Ever since they added the support for the webview in React native for Android ( which happened in their last <a href="https://github.com/facebook/react-native/releases/tag/v0.17.0">release</a> ), I was eager to try it out. So, today&rsquo;s post is about React native webview.</p>

<!-- more -->


<p>First, checkout the <a href="https://facebook.github.io/react-native/docs/webview.html#content">documentation</a> about webview component in React native. I was experimenting with the prop named <code>"injectedJavaScript"</code>. Since it&rsquo;s not explained in detail in their documentation, I&rsquo;ll explain with the code.</p>

<p>The <code>injectedJavaScript</code> is a custom <strong>prop</strong> of the React native Webview component. You can pass any JavaScript code ( as string ) to this prop, and React native will inject this JavaScript code into the Webview. The injected JavaScript will get executed once the Webview is finished loading.</p>

<p>Set up your react-native project as per their documentation. Now it&rsquo;s time to see some code:</p>

<p>```js index.android.js</p>

<pre><code>/**
</code></pre>

<ul>
<li>Sample React Native App</li>
<li><a href="https://github.com/facebook/react-native">https://github.com/facebook/react-native</a>
*/
&lsquo;use strict&rsquo;;</li>
</ul>


<p>import React from &lsquo;react-native&rsquo;;
let { AppRegistry, View, WebView, StyleSheet} = React;</p>

<p>let MyApp extends React.Component {</p>

<pre><code>constructor(props){
  super(props);
}
render() {
    let html = `
        &lt;div id="myContent"&gt;
            This is my name
        &lt;/div&gt;
    `;
    let jsCode = `
        document.querySelector('#myContent').style.backgroundColor = 'red';
    `;
    return (
        &lt;View style={styles.container}&gt;
            &lt;WebView
                style={styles.webView}
                ref="myWebView"
                html={html}
                injectedJavaScript={jsCode}
                javaScriptEnabledAndroid={true}
            &gt;
            &lt;/WebView&gt;
        &lt;/View&gt;
    );
}
</code></pre>

<p>});</p>

<p>let styles = StyleSheet.create({</p>

<pre><code>container: {
    flex: 1,
    backgroundColor: '#fff',
},
webView: {
    backgroundColor: '#fff',
    height: 350,
}
</code></pre>

<p>});</p>

<p>AppRegistry.registerComponent(&lsquo;MyApp&rsquo;, () => MyApp);
```</p>

<p>You should be able to see the background color of the <strong>DIV</strong> changes to red now.</p>
]]></content>
  </entry>
  
</feed>
